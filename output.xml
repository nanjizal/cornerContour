<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="EReg" params="" file="/usr/local/lib/haxe/std/cpp/_std/EReg.hx">
		<r><d/></r>
		<global><x path="Bool"/></global>
		<replace public="1" set="method" line="98">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<new public="1" set="method" line="28">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/regexp/Build.xml\"/>"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IntIterator" params="" file="/usr/local/lib/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="Map" params="K:V" file="/usr/local/lib/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/usr/local/lib/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":include"><e>"hxMath.h"</e></m>
		</meta>
	</class>
	<class path="Reflect" params="" file="/usr/local/lib/haxe/std/cpp/_std/Reflect.hx">
		<isObject public="1" set="method" line="93" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":analyzer"><e>ignore</e></m>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/cpp/_std/Std.hx">
		<is public="1" get="inline" set="null" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m>
				<m n=":keep"/>
			</meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" line="29" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" line="33" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" line="38" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m>
				<m n=":keep"/>
			</meta>
		</instance>
		<string public="1" set="method" line="42" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="46" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="50" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="54" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="58" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\t\tstatic inline String string(String &s) { return s; }"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringBuf" params="" file="/usr/local/lib/haxe/std/cpp/_std/StringBuf.hx">
		<b><c path="Array"><c path="String"/></c></b>
		<charBuf><c path="Array"><x path="cpp.Char"/></c></charBuf>
		<charBufAsString set="method" line="37"><f a=""><c path="String"/></f></charBufAsString>
		<flush set="method" line="43"><f a=""><x path="Void"/></f></flush>
		<toString public="1" set="method" line="92">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<htmlEscape public="1" set="method" line="158" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<isSpace public="1" set="method" line="278" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="296" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="321" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="343" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<hex public="1" set="method" line="434" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Type" params="" file="/usr/local/lib/haxe/std/cpp/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getClassName public="1" set="method" line="61" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="XmlType" params="" file="/usr/local/lib/haxe/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/usr/local/lib/haxe/std/Xml.hx" private="1" module="Xml" final="1">
	<toString public="1" set="method" line="64" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="/usr/local/lib/haxe/std/Xml.hx" private="1" module="Xml" final="1">
		<toString public="1" set="method" line="64" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="Xml" params="" file="/usr/local/lib/haxe/std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="86" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="91" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="96" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="101" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="106" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="111" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="116" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="121" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="182" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="191" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="200" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="209" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="218" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="227" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="236" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="null" set="null">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="null" set="null">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></attributeMap>
		<get public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="255">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<exists public="1" set="method" line="277">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="287">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<firstElement public="1" set="method" line="337">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="353">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="366">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<toString public="1" get="inline" set="null" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<new set="method" line="397"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="cornerContour.IContour" params="" file="src/cornerContour/IContour.hx" interface="1">
		<pointsClock public="1"><c path="Array"><x path="Float"/></c></pointsClock>
		<pointsAnti public="1"><c path="Array"><x path="Float"/></c></pointsAnti>
		<triangleJoin public="1" set="method">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<line public="1" set="method">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="cornerContour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<end public="1" set="method"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
	</class>
	<class path="cornerContour.Contour" params="" file="src/cornerContour/Contour.hx">
		<implements path="cornerContour.IContour"/>
		<smallDotScale get="inline" set="null" expr="0.07" line="83" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.07</e></m></meta>
		</smallDotScale>
		<thetaCompute get="inline" set="null" line="165" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCompute>
		<dist get="inline" set="null" line="169" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dist>
		<debugCol0 public="1" expr="redRadish">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>redRadish</e></m></meta>
		</debugCol0>
		<debugCol1 public="1" expr="gokuOrange">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>gokuOrange</e></m></meta>
		</debugCol1>
		<debugCol2 public="1" expr="carona">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>carona</e></m></meta>
		</debugCol2>
		<debugCol3 public="1" expr="flirtatious">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>flirtatious</e></m></meta>
		</debugCol3>
		<debugCol4 public="1" expr="daffodil">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>daffodil</e></m></meta>
		</debugCol4>
		<debugCol5 public="1" expr="peraRocha">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>peraRocha</e></m></meta>
		</debugCol5>
		<debugCol6 public="1" expr="fieldGreen">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>fieldGreen</e></m></meta>
		</debugCol6>
		<debugCol7 public="1" expr="maximumBlue">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>maximumBlue</e></m></meta>
		</debugCol7>
		<debugCol8 public="1" expr="celestialPlum">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>celestialPlum</e></m></meta>
		</debugCol8>
		<debugCol9 public="1" expr="earlySpringNight">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>earlySpringNight</e></m></meta>
		</debugCol9>
		<debugCol10 public="1" expr="nebulaFuchsia">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>nebulaFuchsia</e></m></meta>
		</debugCol10>
		<debugCol11 public="1" expr="royalFuchsia">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>royalFuchsia</e></m></meta>
		</debugCol11>
		<debugCol12 public="1" expr="orangeSoda">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>orangeSoda</e></m></meta>
		</debugCol12>
		<pointsClock public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsClock>
		<pointsAnti public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsAnti>
		<penultimateCX public="1"><x path="Float"/></penultimateCX>
		<penultimateCY public="1"><x path="Float"/></penultimateCY>
		<lastClockX public="1"><x path="Float"/></lastClockX>
		<lastClockY public="1"><x path="Float"/></lastClockY>
		<penultimateAX public="1"><x path="Float"/></penultimateAX>
		<penultimateAY public="1"><x path="Float"/></penultimateAY>
		<lastAntiX public="1"><x path="Float"/></lastAntiX>
		<lastAntiY public="1"><x path="Float"/></lastAntiY>
		<pen><c path="cornerContour.IPen"/></pen>
		<endLine><x path="cornerContour.StyleEndLine"/></endLine>
		<ax><x path="Float"/></ax>
		<ay><x path="Float"/></ay>
		<bx><x path="Float"/></bx>
		<by><x path="Float"/></by>
		<cx><x path="Float"/></cx>
		<cy><x path="Float"/></cy>
		<dx><x path="Null"><x path="Float"/></x></dx>
		<dy><x path="Null"><x path="Float"/></x></dy>
		<ex><x path="Null"><x path="Float"/></x></ex>
		<ey><x path="Null"><x path="Float"/></x></ey>
		<dxPrev><x path="Null"><x path="Float"/></x></dxPrev>
		<dyPrev><x path="Null"><x path="Float"/></x></dyPrev>
		<exPrev><x path="Null"><x path="Float"/></x></exPrev>
		<eyPrev><x path="Null"><x path="Float"/></x></eyPrev>
		<dxOld><x path="Null"><x path="Float"/></x></dxOld>
		<dyOld><x path="Null"><x path="Float"/></x></dyOld>
		<exOld><x path="Null"><x path="Float"/></x></exOld>
		<eyOld><x path="Null"><x path="Float"/></x></eyOld>
		<jx><x path="Float"/></jx>
		<jy><x path="Float"/></jy>
		<lastClock><x path="Bool"/></lastClock>
		<jxOld><x path="Float"/></jxOld>
		<jyOld><x path="Float"/></jyOld>
		<kax><x path="Float"/></kax>
		<kay><x path="Float"/></kay>
		<kbx><x path="Float"/></kbx>
		<kby><x path="Float"/></kby>
		<kcx><x path="Float"/></kcx>
		<kcy><x path="Float"/></kcy>
		<ncx><x path="Float"/></ncx>
		<ncy><x path="Float"/></ncy>
		<quadIndex><x path="Float"/></quadIndex>
		<angleA public="1"><x path="Float"/></angleA>
		<halfA public="1"><x path="Float"/></halfA>
		<beta public="1"><x path="Float"/></beta>
		<r><x path="Float"/></r>
		<theta public="1"><x path="Float"/></theta>
		<angle1 public="1"><x path="Null"><x path="Float"/></x></angle1>
		<angle2 public="1"><x path="Float"/></angle2>
		<reset public="1" set="method" line="85"><f a=""><x path="Void"/></f></reset>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<computeDE public="1" get="inline" set="null" line="124"><f a=""><x path="Void"/></f></computeDE>
		<anglesCompute get="inline" set="null" line="140"><f a=""><x path="Void"/></f></anglesCompute>
		<thetaComputeAdj get="inline" set="null" line="161"><f a="qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaComputeAdj>
		<triangleJoin public="1" get="inline" set="null" line="178">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<overlapQuad get="inline" set="null" line="260"><f a=""><x path="Void"/></f></overlapQuad>
		<end public="1" get="inline" set="null" line="268"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
		<triangle2DFill get="inline" set="null" line="273">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</triangle2DFill>
		<addPieXstart get="inline" set="null" line="277">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addPieXstart>
		<addPieX get="inline" set="null" line="295">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPieX>
		<addPie get="inline" set="null" line="311">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPie>
		<computeJ get="inline" set="null" line="315"><f a="width_:theta0:dif">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></computeJ>
		<addDot get="inline" set="null" line="325"><f a="x:y:color:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addDot>
		<addSmallTriangles get="inline" set="null" line="348"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSmallTriangles>
		<triangle2DFillangleCorners get="inline" set="null" line="360"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCorners>
		<triangle2DFillangleCornersLess get="inline" set="null" line="368"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCornersLess>
		<connectQuadsWhenQuadsOverlay get="inline" set="null" line="376"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuadsWhenQuadsOverlay>
		<connectQuads get="inline" set="null" line="391"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuads>
		<addInitialQuads get="inline" set="null" line="407"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addInitialQuads>
		<endEdges public="1" set="method" line="490"><f a=""><x path="Void"/></f></endEdges>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<addQuads set="method" line="516"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addQuads>
		<storeLastQuads get="inline" set="null" line="682"><f a=""><x path="Void"/></f></storeLastQuads>
		<isClockwise get="inline" set="null" line="692"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isClockwise>
		<line public="1" get="inline" set="null" line="697">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="cornerContour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<circle public="1" get="inline" set="null" line="738">
			<f a="ax:ay:radius:?color:?sides:?omega" v=":::-1:36:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36, color : -1 }</e></m></meta>
		</circle>
		<pie public="1" get="inline" set="null" line="765">
			<f a="ax:ay:radius:beta:gamma:prefer:?color:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<pieX public="1" get="inline" set="null" line="801">
			<f a="ax:ay:radius:beta:gamma:prefer:edgePoly:?color:?sides" v=":::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pieX>
		<pieDifX public="1" get="inline" set="null" line="835">
			<f a="ax:ay:radius:beta:dif:edgePoly:?color:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
		</pieDifX>
		<new public="1" set="method" line="118">
			<f a="pen_:?endLine_" v=":no">
				<c path="cornerContour.IPen"/>
				<x path="cornerContour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cornerContour.Color2Grads" params="" file="src/cornerContour/ContourGrad.hx" module="cornerContour.ContourGrad">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="cornerContour._ContourGrad.Color2Grads_Impl_" params="" file="src/cornerContour/ContourGrad.hx" private="1" module="cornerContour.ContourGrad" extern="1" final="1">
	<colorAB public="1" get="inline" set="null" expr="cast &quot;colorAB&quot;" line="16" static="1">
		<x path="cornerContour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorAB"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorAB>
	<colorAC public="1" get="inline" set="null" expr="cast &quot;colorAC&quot;" line="17" static="1">
		<x path="cornerContour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorAC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorAC>
	<colorBA public="1" get="inline" set="null" expr="cast &quot;colorBA&quot;" line="18" static="1">
		<x path="cornerContour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorBA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorBA>
	<colorBC public="1" get="inline" set="null" expr="cast &quot;colorBC&quot;" line="19" static="1">
		<x path="cornerContour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorBC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorBC>
	<colorCA public="1" get="inline" set="null" expr="cast &quot;colorCA&quot;" line="20" static="1">
		<x path="cornerContour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorCA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorCA>
	<colorCB public="1" get="inline" set="null" expr="cast &quot;colorCB&quot;" line="21" static="1">
		<x path="cornerContour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorCB"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorCB>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour._ContourGrad.Color2Grads_Impl_" params="" file="src/cornerContour/ContourGrad.hx" private="1" module="cornerContour.ContourGrad" extern="1" final="1">
		<colorAB public="1" get="inline" set="null" expr="cast &quot;colorAB&quot;" line="16" static="1">
			<x path="cornerContour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorAB"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorAB>
		<colorAC public="1" get="inline" set="null" expr="cast &quot;colorAC&quot;" line="17" static="1">
			<x path="cornerContour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorAC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorAC>
		<colorBA public="1" get="inline" set="null" expr="cast &quot;colorBA&quot;" line="18" static="1">
			<x path="cornerContour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorBA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorBA>
		<colorBC public="1" get="inline" set="null" expr="cast &quot;colorBC&quot;" line="19" static="1">
			<x path="cornerContour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorBC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorBC>
		<colorCA public="1" get="inline" set="null" expr="cast &quot;colorCA&quot;" line="20" static="1">
			<x path="cornerContour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorCA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorCA>
		<colorCB public="1" get="inline" set="null" expr="cast &quot;colorCB&quot;" line="21" static="1">
			<x path="cornerContour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorCB"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorCB>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="cornerContour.ContourGrad" params="" file="src/cornerContour/ContourGrad.hx">
		<implements path="cornerContour.IContour"/>
		<smallDotScale get="inline" set="null" expr="0.07" line="97" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.07</e></m></meta>
		</smallDotScale>
		<thetaCompute get="inline" set="null" line="206" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCompute>
		<dist get="inline" set="null" line="210" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dist>
		<colorGradChoice public="1" expr="colorAB">
			<x path="cornerContour.Color2Grads"/>
			<meta><m n=":value"><e>colorAB</e></m></meta>
		</colorGradChoice>
		<debugCol0 public="1" expr="redRadish">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>redRadish</e></m></meta>
		</debugCol0>
		<debugCol1 public="1" expr="gokuOrange">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>gokuOrange</e></m></meta>
		</debugCol1>
		<debugCol2 public="1" expr="carona">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>carona</e></m></meta>
		</debugCol2>
		<debugCol3 public="1" expr="flirtatious">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>flirtatious</e></m></meta>
		</debugCol3>
		<debugCol4 public="1" expr="daffodil">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>daffodil</e></m></meta>
		</debugCol4>
		<debugCol5 public="1" expr="peraRocha">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>peraRocha</e></m></meta>
		</debugCol5>
		<debugCol6 public="1" expr="fieldGreen">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>fieldGreen</e></m></meta>
		</debugCol6>
		<debugCol7 public="1" expr="maximumBlue">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>maximumBlue</e></m></meta>
		</debugCol7>
		<debugCol8 public="1" expr="celestialPlum">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>celestialPlum</e></m></meta>
		</debugCol8>
		<debugCol9 public="1" expr="earlySpringNight">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>earlySpringNight</e></m></meta>
		</debugCol9>
		<debugCol10 public="1" expr="nebulaFuchsia">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>nebulaFuchsia</e></m></meta>
		</debugCol10>
		<debugCol11 public="1" expr="royalFuchsia">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>royalFuchsia</e></m></meta>
		</debugCol11>
		<debugCol12 public="1" expr="orangeSoda">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta><m n=":value"><e>orangeSoda</e></m></meta>
		</debugCol12>
		<pointsClock public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsClock>
		<pointsAnti public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsAnti>
		<penultimateCX public="1"><x path="Float"/></penultimateCX>
		<penultimateCY public="1"><x path="Float"/></penultimateCY>
		<lastClockX public="1"><x path="Float"/></lastClockX>
		<lastClockY public="1"><x path="Float"/></lastClockY>
		<penultimateAX public="1"><x path="Float"/></penultimateAX>
		<penultimateAY public="1"><x path="Float"/></penultimateAY>
		<lastAntiX public="1"><x path="Float"/></lastAntiX>
		<lastAntiY public="1"><x path="Float"/></lastAntiY>
		<pen><c path="cornerContour.IPen"/></pen>
		<endLine><x path="cornerContour.StyleEndLine"/></endLine>
		<ax><x path="Float"/></ax>
		<ay><x path="Float"/></ay>
		<bx><x path="Float"/></bx>
		<by><x path="Float"/></by>
		<cx><x path="Float"/></cx>
		<cy><x path="Float"/></cy>
		<dx><x path="Null"><x path="Float"/></x></dx>
		<dy><x path="Null"><x path="Float"/></x></dy>
		<ex><x path="Null"><x path="Float"/></x></ex>
		<ey><x path="Null"><x path="Float"/></x></ey>
		<dxPrev><x path="Null"><x path="Float"/></x></dxPrev>
		<dyPrev><x path="Null"><x path="Float"/></x></dyPrev>
		<exPrev><x path="Null"><x path="Float"/></x></exPrev>
		<eyPrev><x path="Null"><x path="Float"/></x></eyPrev>
		<dxOld><x path="Null"><x path="Float"/></x></dxOld>
		<dyOld><x path="Null"><x path="Float"/></x></dyOld>
		<exOld><x path="Null"><x path="Float"/></x></exOld>
		<eyOld><x path="Null"><x path="Float"/></x></eyOld>
		<jx><x path="Float"/></jx>
		<jy><x path="Float"/></jy>
		<lastClock><x path="Bool"/></lastClock>
		<jxOld><x path="Float"/></jxOld>
		<jyOld><x path="Float"/></jyOld>
		<kax><x path="Float"/></kax>
		<kay><x path="Float"/></kay>
		<kbx><x path="Float"/></kbx>
		<kby><x path="Float"/></kby>
		<kcx><x path="Float"/></kcx>
		<kcy><x path="Float"/></kcy>
		<ncx><x path="Float"/></ncx>
		<ncy><x path="Float"/></ncy>
		<quadIndex><x path="Float"/></quadIndex>
		<angleA public="1"><x path="Float"/></angleA>
		<halfA public="1"><x path="Float"/></halfA>
		<beta public="1"><x path="Float"/></beta>
		<r><x path="Float"/></r>
		<theta public="1"><x path="Float"/></theta>
		<angle1 public="1"><x path="Null"><x path="Float"/></x></angle1>
		<angle2 public="1"><x path="Float"/></angle2>
		<setGradChoice public="1" set="method" line="99"><f a="colorGradChoice_">
	<x path="cornerContour.Color2Grads"/>
	<x path="Void"/>
</f></setGradChoice>
		<getGradColors public="1" set="method" line="103"><f a=""><x path="cornerContour.color.TwoGrad"/></f></getGradColors>
		<reset public="1" set="method" line="126"><f a=""><x path="Void"/></f></reset>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<computeDE public="1" get="inline" set="null" line="165"><f a=""><x path="Void"/></f></computeDE>
		<anglesCompute get="inline" set="null" line="181"><f a=""><x path="Void"/></f></anglesCompute>
		<thetaComputeAdj get="inline" set="null" line="202"><f a="qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaComputeAdj>
		<triangleJoin public="1" get="inline" set="null" line="216">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<overlapQuad get="inline" set="null" line="313"><f a=""><x path="Void"/></f></overlapQuad>
		<end public="1" get="inline" set="null" line="321"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
		<twoGrad><x path="cornerContour.color.TwoGrad"/></twoGrad>
		<triangle2DFill get="inline" set="null" line="328">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</triangle2DFill>
		<tri2DFill_A_C_C get="inline" set="null" line="341">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_C_C>
		<tri2DFill_C_A_C get="inline" set="null" line="350">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_A_C>
		<tri2DFill_C_C_A get="inline" set="null" line="359">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_C_A>
		<tri2DFill_A_A_C get="inline" set="null" line="368">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_A_C>
		<tri2DFill_C_A_A get="inline" set="null" line="377">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_A_A>
		<tri2DFill_A_C_A get="inline" set="null" line="386">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_C_A>
		<tri2DFill_A_h_C get="inline" set="null" line="395">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_h_C>
		<tri2DFill_A_C_h get="inline" set="null" line="402">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_C_h>
		<tri2DFill_C_A_h get="inline" set="null" line="409">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_A_h>
		<tri2DFill_C_h_A get="inline" set="null" line="416">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_h_A>
		<tri2DFill_h_C_A get="inline" set="null" line="423">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_h_C_A>
		<tri2DFill_h_A_C get="inline" set="null" line="430">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_h_A_C>
		<tri2DFill_h_A_A get="inline" set="null" line="437">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_h_A_A>
		<tri2DFill_h_C_C get="inline" set="null" line="444">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_h_C_C>
		<tri2DFill_A_h_A get="inline" set="null" line="451">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_h_A>
		<tri2DFill_C_h_C get="inline" set="null" line="458">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_h_C>
		<tri2DFill_A_A_h get="inline" set="null" line="465">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_A_h>
		<tri2DFill_C_C_h get="inline" set="null" line="472">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_C_h>
		<triangle2DFillRGB get="inline" set="null" line="483">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
			<haxe_doc>* Used to help with Debugging trangles.
     *</haxe_doc>
		</triangle2DFillRGB>
		<addPieXstart get="inline" set="null" line="491">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addPieXstart>
		<addPieX get="inline" set="null" line="515">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPieX>
		<addPie get="inline" set="null" line="536">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPie>
		<computeJ get="inline" set="null" line="540"><f a="width_:theta0:dif">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></computeJ>
		<addDot get="inline" set="null" line="550"><f a="x:y:color:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addDot>
		<addSmallTriangles get="inline" set="null" line="573"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSmallTriangles>
		<triangle2DFillangleCorners get="inline" set="null" line="587"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCorners>
		<triangle2DFillangleCornersLess get="inline" set="null" line="595"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCornersLess>
		<connectQuadsWhenQuadsOverlay get="inline" set="null" line="603"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuadsWhenQuadsOverlay>
		<connectQuads get="inline" set="null" line="618"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuads>
		<addInitialQuads get="inline" set="null" line="636"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addInitialQuads>
		<endEdges public="1" set="method" line="740"><f a=""><x path="Void"/></f></endEdges>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<addQuads set="method" line="766"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addQuads>
		<storeLastQuads get="inline" set="null" line="963"><f a=""><x path="Void"/></f></storeLastQuads>
		<isClockwise get="inline" set="null" line="973"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isClockwise>
		<line public="1" get="inline" set="null" line="977">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="cornerContour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<circle public="1" get="inline" set="null" line="1018">
			<f a="ax:ay:radius:?color:?sides:?omega" v=":::-1:36:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36, color : -1 }</e></m></meta>
		</circle>
		<pie public="1" get="inline" set="null" line="1047">
			<f a="ax:ay:radius:beta:gamma:prefer:?color:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<pieX public="1" get="inline" set="null" line="1083">
			<f a="ax:ay:radius:beta:gamma:prefer:edgePoly:clockWise:?color:?sides" v="::::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pieX>
		<pieDifX public="1" get="inline" set="null" line="1127">
			<f a="ax:ay:radius:beta:dif:edgePoly:clockWise:?color:?sides" v=":::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
		</pieDifX>
		<new public="1" set="method" line="159">
			<f a="pen_:?endLine_" v=":no">
				<c path="cornerContour.IPen"/>
				<x path="cornerContour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContour._CurveMath.CurveMath_Fields_" params="" file="src/cornerContour/CurveMath.hx" private="1" module="cornerContour.CurveMath" final="1">
		<distance public="1" get="inline" set="null" line="3" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distance>
		<quadStep public="1" expr="0.03" line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</quadStep>
		<quadCurve public="1" get="inline" set="null" line="11" static="1"><f a="p:ax:ay:bx:by:cx:cy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></quadCurve>
		<cubicStep public="1" get="inline" set="null" expr="0.03" line="27" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</cubicStep>
		<cubicCurve public="1" get="inline" set="null" line="30" static="1"><f a="p:ax:ay:bx:by:cx:cy:dx:dy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></cubicCurve>
		<calculateQuadStep public="1" get="inline" set="null" line="46" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateQuadStep>
		<calculateCubicStep public="1" get="inline" set="null" line="52" static="1"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateCubicStep>
		<quadraticThru public="1" get="inline" set="null" line="58" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadraticThru>
		<quadratic public="1" get="inline" set="null" line="63" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadratic>
		<cubic public="1" get="inline" set="null" line="68" static="1"><f a="t:s:c1:c2:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cubic>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContour.IPen" params="" file="src/cornerContour/IPen.hx" interface="1">
		<get_pos public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_pos>
		<set_pos public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</set_pos>
		<get_size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_size>
		<currentColor public="1"><x path="Int"/></currentColor>
		<colorB public="1"><x path="Int"/></colorB>
		<colorC public="1"><x path="Int"/></colorC>
		<triangle2DFill public="1" set="method"><f a="ax:ay:bx:by:cx:cy:?color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle2DGrad public="1" set="method"><f a="ax:ay:bx:by:cx:cy:?colorA:?colorB:?colorC">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
	</class>
	<class path="cornerContour.Pen2D" params="" file="src/cornerContour/Pen2D.hx">
		<implements path="cornerContour.IPen"/>
		<arr public="1" expr="new Array2DTriangles()">
			<x path="cornerContour.io.Array2DTriangles"/>
			<meta><m n=":value"><e>new Array2DTriangles()</e></m></meta>
		</arr>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="9"><f a=""><x path="Float"/></f></get_pos>
		<set_pos get="inline" set="null" line="13"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<get_size get="inline" set="null" line="18"><f a=""><x path="Int"/></f></get_size>
		<triangle2DFill public="1" get="inline" set="null" line="26"><f a="ax:ay:bx:by:cx:cy:?color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle2DGrad public="1" set="method" line="36"><f a="ax:ay:bx:by:cx:cy:?colorA:?colorB:?colorC">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
		<currentColor public="1"><x path="Int"/></currentColor>
		<colorB public="1"><x path="Int"/></colorB>
		<colorC public="1"><x path="Int"/></colorC>
		<new public="1" set="method" line="5"><f a="col">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="cornerContour.Pen2DGrad" params="" file="src/cornerContour/Pen2DGrad.hx">
		<implements path="cornerContour.IPen"/>
		<arr public="1" expr="new Array2DTriGrad()">
			<x path="cornerContour.io.Array2DTriGrad"/>
			<meta><m n=":value"><e>new Array2DTriGrad()</e></m></meta>
		</arr>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="27"><f a=""><x path="Float"/></f></get_pos>
		<set_pos get="inline" set="null" line="31"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<get_size get="inline" set="null" line="36"><f a=""><x path="Int"/></f></get_size>
		<triangle2DFill public="1" get="inline" set="null" line="44"><f a="ax:ay:bx:by:cx:cy:?color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle2DGrad public="1" set="method" line="53"><f a="ax:ay:bx:by:cx:cy:?colorA:?colorB:?colorC">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
		<currentColor public="1"><x path="Int"/></currentColor>
		<colorB public="1"><x path="Int"/></colorB>
		<colorC public="1"><x path="Int"/></colorC>
		<new public="1" set="method" line="13"><f a="col:?colB:?colC">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="cornerContour.Dim" params="" file="src/cornerContour/Sketcher.hx" module="cornerContour.Sketcher"><a>
	<minY><x path="Float"/></minY>
	<minX><x path="Float"/></minX>
	<maxY><x path="Float"/></maxY>
	<maxX><x path="Float"/></maxX>
</a></typedef>
	<class path="justPath.IPathContext" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/IPathContext.hx" interface="1">
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" set="method"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
	</class>
	<class path="cornerContour.Sketcher" params="" file="src/cornerContour/Sketcher.hx">
		<implements path="justPath.IPathContext"/>
		<x expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<width public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</width>
		<widthFunction public="1"><f a="::::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></widthFunction>
		<colourFunction public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunction>
		<tempArr><c path="Array"><x path="Float"/></c></tempArr>
		<contour public="1"><c path="cornerContour.IContour"/></contour>
		<pen public="1"><c path="cornerContour.IPen"/></pen>
		<endLine><x path="cornerContour.StyleEndLine"/></endLine>
		<sketchForm><x path="cornerContour.StyleSketch"/></sketchForm>
		<points public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></points>
		<pointsClock public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsClock>
		<pointsAnti public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsAnti>
		<dim public="1"><c path="Array"><t path="cornerContour.Dim"/></c></dim>
		<tracerLine get="inline" set="null" line="29"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></tracerLine>
		<fillOnlyLine get="inline" set="null" line="32"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillOnlyLine>
		<baseLine set="method" line="34"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></baseLine>
		<crudeLine get="inline" set="null" line="38"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></crudeLine>
		<roundEndLine get="inline" set="null" line="41"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></roundEndLine>
		<mediumLine get="inline" set="null" line="44"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumLine>
		<mediumOverlapLine get="inline" set="null" line="47"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumOverlapLine>
		<fineLine get="inline" set="null" line="50"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineLine>
		<fineOverlapLine get="inline" set="null" line="53"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineOverlapLine>
		<line public="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></line>
		<createContour public="1" set="method" line="81"><f a=""><c path="cornerContour.IContour"/></f></createContour>
		<reset public="1" set="method" line="84"><f a=""><x path="Void"/></f></reset>
		<pointsNoEndOverlap public="1" set="method" line="92"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsNoEndOverlap>
		<pointsRewound public="1" set="method" line="114"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsRewound>
		<initDim get="inline" set="null" line="161"><f a=""><t path="cornerContour.Dim"/></f></initDim>
		<updateDim get="inline" set="null" line="164"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateDim>
		<moveTo public="1" get="inline" set="null" line="172"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lastClock public="1" get="inline" set="null" line="190"><f a=""><x path="Void"/></f></lastClock>
		<getEdges public="1" get="inline" set="null" line="200"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></getEdges>
		<lineTo public="1" set="method" line="228"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="245"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<quadThru public="1" get="inline" set="null" line="254"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<curveTo public="1" get="inline" set="null" line="261"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<plotCoord public="1" get="inline" set="null" line="269">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotCoord>
		<penIsDown expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</penIsDown>
		<rotation expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</rotation>
		<fill expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</fill>
		<repeatCount expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</repeatCount>
		<repeatCommands expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</repeatCommands>
		<turtleCommands expr="new Array&lt;TurtleCommand&gt;()">
			<c path="Array"><x path="cornerContour.TurtleCommand"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<TurtleCommand>()]]></e></m></meta>
		</turtleCommands>
		<turtleParameters expr="new Array&lt;Float&gt;()">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Float>()]]></e></m></meta>
		</turtleParameters>
		<fillOn public="1" get="inline" set="null" line="314">
			<f a=""><c path="cornerContour.Sketcher"/></f>
			<haxe_doc>* currently very limited,
     * only used for circle, arc sort of and forwardTriangle/forwardCurve</haxe_doc>
		</fillOn>
		<fillOff public="1" get="inline" set="null" line="323"><f a=""><c path="cornerContour.Sketcher"/></f></fillOff>
		<penUp public="1" get="inline" set="null" line="332"><f a=""><c path="cornerContour.Sketcher"/></f></penUp>
		<penDown public="1" get="inline" set="null" line="341"><f a=""><c path="cornerContour.Sketcher"/></f></penDown>
		<toRadians public="1" get="inline" set="null" line="350"><f a="degrees">
	<x path="Float"/>
	<x path="Float"/>
</f></toRadians>
		<left public="1" get="inline" set="null" line="354"><f a="degrees">
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></left>
		<right public="1" get="inline" set="null" line="364"><f a="degrees">
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></right>
		<forward public="1" get="inline" set="null" line="374"><f a="distance">
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></forward>
		<forwardTriangleRight public="1" get="inline" set="null" line="390"><f a="distance:distance2:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></forwardTriangleRight>
		<forwardTriangleLeft public="1" get="inline" set="null" line="418"><f a="distance:distance2:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></forwardTriangleLeft>
		<forwardCurveRight public="1" get="inline" set="null" line="446"><f a="distance:distance2:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></forwardCurveRight>
		<forwardCurveLeft public="1" get="inline" set="null" line="466"><f a="distance:distance2:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></forwardCurveLeft>
		<fd public="1" get="inline" set="null" line="486"><f a="distance">
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></fd>
		<backward public="1" get="inline" set="null" line="490"><f a="distance">
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></backward>
		<bk public="1" get="inline" set="null" line="501"><f a="distance">
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></bk>
		<movePen public="1" get="inline" set="null" line="505"><f a="distance">
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></movePen>
		<circle public="1" get="inline" set="null" line="528">
			<f a="radius:?sides" v=":24">
				<x path="Float"/>
				<x path="Float"/>
				<c path="cornerContour.Sketcher"/>
			</f>
			<meta><m n=":value"><e>{ sides : 24 }</e></m></meta>
			<haxe_doc>* circle
     *
     * Draw a circle with a given radius. The center is radius units left of the turtle if positive.
     * Otherwise radius units right of the turtle if negative.
     * The circle is drawn in an anticlockwise direction if the radius is positive, otherwise, it is drawn in a clockwise direction.</haxe_doc>
		</circle>
		<arc public="1" get="inline" set="null" line="580">
			<f a="radius:degrees:?sides" v="::24">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="cornerContour.Sketcher"/>
			</f>
			<meta><m n=":value"><e>{ sides : 24 }</e></m></meta>
		</arc>
		<north public="1" get="inline" set="null" line="638"><f a=""><c path="cornerContour.Sketcher"/></f></north>
		<rotationReset public="1" get="inline" set="null" line="647"><f a=""><c path="cornerContour.Sketcher"/></f></rotationReset>
		<west public="1" get="inline" set="null" line="651"><f a=""><c path="cornerContour.Sketcher"/></f></west>
		<east public="1" get="inline" set="null" line="660"><f a=""><c path="cornerContour.Sketcher"/></f></east>
		<south public="1" get="inline" set="null" line="669"><f a=""><c path="cornerContour.Sketcher"/></f></south>
		<heading public="1" get="inline" set="null" line="678"><f a=""><x path="Float"/></f></heading>
		<position public="1" get="inline" set="null" line="684"><f a=""><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></f></position>
		<setPosition public="1" get="inline" set="null" line="688"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></setPosition>
		<penSize public="1" get="inline" set="null" line="699"><f a="w">
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></penSize>
		<penSizeChange public="1" get="inline" set="null" line="709"><f a="dw">
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></penSizeChange>
		<beginRepeat public="1" get="inline" set="null" line="719"><f a="repeatCount_">
	<x path="Int"/>
	<c path="cornerContour.Sketcher"/>
</f></beginRepeat>
		<endRepeat public="1" get="inline" set="null" line="729"><f a=""><c path="cornerContour.Sketcher"/></f></endRepeat>
		<penColor public="1" get="inline" set="null" line="860"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></penColor>
		<penColorChange public="1" get="inline" set="null" line="875"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></penColorChange>
		<penColorB public="1" get="inline" set="null" line="894"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></penColorB>
		<penColorChangeB public="1" get="inline" set="null" line="909"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></penColorChangeB>
		<penColorC public="1" get="inline" set="null" line="928"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></penColorC>
		<penColorChangeC public="1" get="inline" set="null" line="943"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.Sketcher"/>
</f></penColorChangeC>
		<black public="1" get="inline" set="null" line="963"><f a=""><c path="cornerContour.Sketcher"/></f></black>
		<blue public="1" get="inline" set="null" line="972"><f a=""><c path="cornerContour.Sketcher"/></f></blue>
		<green public="1" get="inline" set="null" line="981"><f a=""><c path="cornerContour.Sketcher"/></f></green>
		<cyan public="1" get="inline" set="null" line="990"><f a=""><c path="cornerContour.Sketcher"/></f></cyan>
		<red public="1" get="inline" set="null" line="999"><f a=""><c path="cornerContour.Sketcher"/></f></red>
		<magenta public="1" get="inline" set="null" line="1008"><f a=""><c path="cornerContour.Sketcher"/></f></magenta>
		<yellow public="1" get="inline" set="null" line="1017"><f a=""><c path="cornerContour.Sketcher"/></f></yellow>
		<white public="1" get="inline" set="null" line="1026"><f a=""><c path="cornerContour.Sketcher"/></f></white>
		<brown public="1" get="inline" set="null" line="1035"><f a=""><c path="cornerContour.Sketcher"/></f></brown>
		<lightBrown public="1" get="inline" set="null" line="1044"><f a=""><c path="cornerContour.Sketcher"/></f></lightBrown>
		<darkGreen public="1" get="inline" set="null" line="1053"><f a=""><c path="cornerContour.Sketcher"/></f></darkGreen>
		<darkishBlue public="1" get="inline" set="null" line="1062"><f a=""><c path="cornerContour.Sketcher"/></f></darkishBlue>
		<tan public="1" get="inline" set="null" line="1071"><f a=""><c path="cornerContour.Sketcher"/></f></tan>
		<plum public="1" get="inline" set="null" line="1080"><f a=""><c path="cornerContour.Sketcher"/></f></plum>
		<orange public="1" set="method" line="1088"><f a=""><c path="cornerContour.Sketcher"/></f></orange>
		<grey public="1" set="method" line="1096"><f a=""><c path="cornerContour.Sketcher"/></f></grey>
		<new public="1" set="method" line="57">
			<f a="pen_:sketchForm_:?endLine_" v="::no">
				<c path="cornerContour.IPen"/>
				<x path="cornerContour.StyleSketch"/>
				<x path="cornerContour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
	</class>
	<abstract path="cornerContour.TurtleCommand" params="" file="src/cornerContour/Sketcher.hx" module="cornerContour.Sketcher">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour._Sketcher.TurtleCommand_Impl_" params="" file="src/cornerContour/Sketcher.hx" private="1" module="cornerContour.Sketcher" extern="1" final="1">
	<FORWARD public="1" get="inline" set="null" expr="cast &quot;FORWARD&quot;" line="1108" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "FORWARD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FORWARD>
	<BACKWARD public="1" get="inline" set="null" expr="cast &quot;BACKWARD&quot;" line="1109" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "BACKWARD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKWARD>
	<PEN_UP public="1" get="inline" set="null" expr="cast &quot;PEN_UP&quot;" line="1110" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_UP"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_UP>
	<PEN_DOWN public="1" get="inline" set="null" expr="cast &quot;PEN_DOWN&quot;" line="1111" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_DOWN"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_DOWN>
	<LEFT public="1" get="inline" set="null" expr="cast &quot;LEFT&quot;" line="1112" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "LEFT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT>
	<RIGHT public="1" get="inline" set="null" expr="cast &quot;RIGHT&quot;" line="1113" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "RIGHT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT>
	<NORTH public="1" get="inline" set="null" expr="cast &quot;NORTH&quot;" line="1114" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "NORTH"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NORTH>
	<SOUTH public="1" get="inline" set="null" expr="cast &quot;SOUTH&quot;" line="1115" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "SOUTH"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SOUTH>
	<WEST public="1" get="inline" set="null" expr="cast &quot;WEST&quot;" line="1116" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "WEST"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WEST>
	<EAST public="1" get="inline" set="null" expr="cast &quot;EAST&quot;" line="1117" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "EAST"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EAST>
	<SET_POSITION public="1" get="inline" set="null" expr="cast &quot;SET_POSITION&quot;" line="1118" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "SET_POSITION"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SET_POSITION>
	<PEN_SIZE public="1" get="inline" set="null" expr="cast &quot;PEN_SIZE&quot;" line="1119" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_SIZE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_SIZE>
	<PEN_SIZE_CHANGE public="1" get="inline" set="null" expr="cast &quot;PEN_SIZE_CHANGE&quot;" line="1120" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_SIZE_CHANGE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_SIZE_CHANGE>
	<CIRCLE public="1" get="inline" set="null" expr="cast &quot;CIRCLE&quot;" line="1121" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "CIRCLE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CIRCLE>
	<CIRCLE_SIDES public="1" get="inline" set="null" expr="cast &quot;CIRCLE_SIDES&quot;" line="1122" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "CIRCLE_SIDES"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CIRCLE_SIDES>
	<ARC public="1" get="inline" set="null" expr="cast &quot;ARC&quot;" line="1123" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "ARC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ARC>
	<ARC_SIDES public="1" get="inline" set="null" expr="cast &quot;ARC_SIDES&quot;" line="1124" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "ARC_SIDES"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ARC_SIDES>
	<MOVE_PEN public="1" get="inline" set="null" expr="cast &quot;MOVE_PEN&quot;" line="1125" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "MOVE_PEN"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MOVE_PEN>
	<FORWARD_TRIANGLE_RIGHT public="1" get="inline" set="null" expr="cast &quot;FORWARD_TRIANGLE_RIGHT&quot;" line="1126" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "FORWARD_TRIANGLE_RIGHT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FORWARD_TRIANGLE_RIGHT>
	<FORWARD_TRIANGLE_LEFT public="1" get="inline" set="null" expr="cast &quot;FORWARD_TRIANGLE_LEFT&quot;" line="1127" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "FORWARD_TRIANGLE_LEFT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FORWARD_TRIANGLE_LEFT>
	<FORWARD_CURVE_RIGHT public="1" get="inline" set="null" expr="cast &quot;FORWARD_CURVE_RIGHT&quot;" line="1128" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "FORWARD_CURVE_RIGHT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FORWARD_CURVE_RIGHT>
	<FORWARD_CURVE_LEFT public="1" get="inline" set="null" expr="cast &quot;FORWARD_CURVE_LEFT&quot;" line="1129" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "FORWARD_CURVE_LEFT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FORWARD_CURVE_LEFT>
	<FILL_ON public="1" get="inline" set="null" expr="cast &quot;FILL_ON&quot;" line="1130" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "FILL_ON"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FILL_ON>
	<FILL_OFF public="1" get="inline" set="null" expr="cast &quot;FILL_OFF&quot;" line="1131" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "FILL_OFF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FILL_OFF>
	<PEN_COLOR public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR&quot;" line="1134" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_COLOR"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_COLOR>
	<PEN_COLOR_CHANGE public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_CHANGE&quot;" line="1135" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_COLOR_CHANGE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_COLOR_CHANGE>
	<PEN_COLOR_CHANGE_B public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_CHANGE_B&quot;" line="1136" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_COLOR_CHANGE_B"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_COLOR_CHANGE_B>
	<PEN_COLOR_CHANGE_C public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_CHANGE_C&quot;" line="1137" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_COLOR_CHANGE_C"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_COLOR_CHANGE_C>
	<PEN_COLOR_B public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_B&quot;" line="1138" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_COLOR_B"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_COLOR_B>
	<PEN_COLOR_C public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_C&quot;" line="1139" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PEN_COLOR_C"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEN_COLOR_C>
	<BLACK public="1" get="inline" set="null" expr="cast &quot;BLACK&quot;" line="1140" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "BLACK"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BLACK>
	<BLUE public="1" get="inline" set="null" expr="cast &quot;BLUE&quot;" line="1141" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "BLUE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BLUE>
	<GREEN public="1" get="inline" set="null" expr="cast &quot;GREEN&quot;" line="1142" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "GREEN"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GREEN>
	<CYAN public="1" get="inline" set="null" expr="cast &quot;CYAN&quot;" line="1143" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "CYAN"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CYAN>
	<RED public="1" get="inline" set="null" expr="cast &quot;RED&quot;" line="1144" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "RED"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RED>
	<MAGENTA public="1" get="inline" set="null" expr="cast &quot;MAGENTA&quot;" line="1145" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "MAGENTA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MAGENTA>
	<YELLOW public="1" get="inline" set="null" expr="cast &quot;YELLOW&quot;" line="1146" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "YELLOW"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</YELLOW>
	<WHITE public="1" get="inline" set="null" expr="cast &quot;WHITE&quot;" line="1147" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "WHITE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WHITE>
	<BROWN public="1" get="inline" set="null" expr="cast &quot;BROWN&quot;" line="1148" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "BROWN"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BROWN>
	<LIGHT_BROWN public="1" get="inline" set="null" expr="cast &quot;LIGHT_BROWN&quot;" line="1149" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "LIGHT_BROWN"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LIGHT_BROWN>
	<DARK_GREEN public="1" get="inline" set="null" expr="cast &quot;DARK_GREEN&quot;" line="1150" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "DARK_GREEN"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DARK_GREEN>
	<DARKISH_BLUE public="1" get="inline" set="null" expr="cast &quot;DARKISH_BLUE&quot;" line="1151" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "DARKISH_BLUE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DARKISH_BLUE>
	<TAN public="1" get="inline" set="null" expr="cast &quot;TAN&quot;" line="1152" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "TAN"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAN>
	<PLUM public="1" get="inline" set="null" expr="cast &quot;PLUM&quot;" line="1153" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "PLUM"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PLUM>
	<ORANGE public="1" get="inline" set="null" expr="cast &quot;ORANGE&quot;" line="1154" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "ORANGE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ORANGE>
	<GREY public="1" get="inline" set="null" expr="cast &quot;GREY&quot;" line="1155" static="1">
		<x path="cornerContour.TurtleCommand"/>
		<meta>
			<m n=":value"><e>cast "GREY"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GREY>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour._Sketcher.TurtleCommand_Impl_" params="" file="src/cornerContour/Sketcher.hx" private="1" module="cornerContour.Sketcher" extern="1" final="1">
		<FORWARD public="1" get="inline" set="null" expr="cast &quot;FORWARD&quot;" line="1108" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "FORWARD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FORWARD>
		<BACKWARD public="1" get="inline" set="null" expr="cast &quot;BACKWARD&quot;" line="1109" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "BACKWARD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKWARD>
		<PEN_UP public="1" get="inline" set="null" expr="cast &quot;PEN_UP&quot;" line="1110" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_UP"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_UP>
		<PEN_DOWN public="1" get="inline" set="null" expr="cast &quot;PEN_DOWN&quot;" line="1111" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_DOWN"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_DOWN>
		<LEFT public="1" get="inline" set="null" expr="cast &quot;LEFT&quot;" line="1112" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "LEFT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT>
		<RIGHT public="1" get="inline" set="null" expr="cast &quot;RIGHT&quot;" line="1113" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "RIGHT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT>
		<NORTH public="1" get="inline" set="null" expr="cast &quot;NORTH&quot;" line="1114" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "NORTH"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NORTH>
		<SOUTH public="1" get="inline" set="null" expr="cast &quot;SOUTH&quot;" line="1115" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "SOUTH"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SOUTH>
		<WEST public="1" get="inline" set="null" expr="cast &quot;WEST&quot;" line="1116" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "WEST"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WEST>
		<EAST public="1" get="inline" set="null" expr="cast &quot;EAST&quot;" line="1117" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "EAST"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EAST>
		<SET_POSITION public="1" get="inline" set="null" expr="cast &quot;SET_POSITION&quot;" line="1118" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "SET_POSITION"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SET_POSITION>
		<PEN_SIZE public="1" get="inline" set="null" expr="cast &quot;PEN_SIZE&quot;" line="1119" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_SIZE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_SIZE>
		<PEN_SIZE_CHANGE public="1" get="inline" set="null" expr="cast &quot;PEN_SIZE_CHANGE&quot;" line="1120" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_SIZE_CHANGE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_SIZE_CHANGE>
		<CIRCLE public="1" get="inline" set="null" expr="cast &quot;CIRCLE&quot;" line="1121" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "CIRCLE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CIRCLE>
		<CIRCLE_SIDES public="1" get="inline" set="null" expr="cast &quot;CIRCLE_SIDES&quot;" line="1122" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "CIRCLE_SIDES"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CIRCLE_SIDES>
		<ARC public="1" get="inline" set="null" expr="cast &quot;ARC&quot;" line="1123" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "ARC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ARC>
		<ARC_SIDES public="1" get="inline" set="null" expr="cast &quot;ARC_SIDES&quot;" line="1124" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "ARC_SIDES"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ARC_SIDES>
		<MOVE_PEN public="1" get="inline" set="null" expr="cast &quot;MOVE_PEN&quot;" line="1125" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "MOVE_PEN"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MOVE_PEN>
		<FORWARD_TRIANGLE_RIGHT public="1" get="inline" set="null" expr="cast &quot;FORWARD_TRIANGLE_RIGHT&quot;" line="1126" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "FORWARD_TRIANGLE_RIGHT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FORWARD_TRIANGLE_RIGHT>
		<FORWARD_TRIANGLE_LEFT public="1" get="inline" set="null" expr="cast &quot;FORWARD_TRIANGLE_LEFT&quot;" line="1127" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "FORWARD_TRIANGLE_LEFT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FORWARD_TRIANGLE_LEFT>
		<FORWARD_CURVE_RIGHT public="1" get="inline" set="null" expr="cast &quot;FORWARD_CURVE_RIGHT&quot;" line="1128" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "FORWARD_CURVE_RIGHT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FORWARD_CURVE_RIGHT>
		<FORWARD_CURVE_LEFT public="1" get="inline" set="null" expr="cast &quot;FORWARD_CURVE_LEFT&quot;" line="1129" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "FORWARD_CURVE_LEFT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FORWARD_CURVE_LEFT>
		<FILL_ON public="1" get="inline" set="null" expr="cast &quot;FILL_ON&quot;" line="1130" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "FILL_ON"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FILL_ON>
		<FILL_OFF public="1" get="inline" set="null" expr="cast &quot;FILL_OFF&quot;" line="1131" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "FILL_OFF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FILL_OFF>
		<PEN_COLOR public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR&quot;" line="1134" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_COLOR"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_COLOR>
		<PEN_COLOR_CHANGE public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_CHANGE&quot;" line="1135" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_COLOR_CHANGE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_COLOR_CHANGE>
		<PEN_COLOR_CHANGE_B public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_CHANGE_B&quot;" line="1136" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_COLOR_CHANGE_B"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_COLOR_CHANGE_B>
		<PEN_COLOR_CHANGE_C public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_CHANGE_C&quot;" line="1137" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_COLOR_CHANGE_C"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_COLOR_CHANGE_C>
		<PEN_COLOR_B public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_B&quot;" line="1138" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_COLOR_B"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_COLOR_B>
		<PEN_COLOR_C public="1" get="inline" set="null" expr="cast &quot;PEN_COLOR_C&quot;" line="1139" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PEN_COLOR_C"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEN_COLOR_C>
		<BLACK public="1" get="inline" set="null" expr="cast &quot;BLACK&quot;" line="1140" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "BLACK"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BLACK>
		<BLUE public="1" get="inline" set="null" expr="cast &quot;BLUE&quot;" line="1141" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "BLUE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BLUE>
		<GREEN public="1" get="inline" set="null" expr="cast &quot;GREEN&quot;" line="1142" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "GREEN"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GREEN>
		<CYAN public="1" get="inline" set="null" expr="cast &quot;CYAN&quot;" line="1143" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "CYAN"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CYAN>
		<RED public="1" get="inline" set="null" expr="cast &quot;RED&quot;" line="1144" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "RED"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RED>
		<MAGENTA public="1" get="inline" set="null" expr="cast &quot;MAGENTA&quot;" line="1145" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "MAGENTA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MAGENTA>
		<YELLOW public="1" get="inline" set="null" expr="cast &quot;YELLOW&quot;" line="1146" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "YELLOW"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</YELLOW>
		<WHITE public="1" get="inline" set="null" expr="cast &quot;WHITE&quot;" line="1147" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "WHITE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WHITE>
		<BROWN public="1" get="inline" set="null" expr="cast &quot;BROWN&quot;" line="1148" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "BROWN"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BROWN>
		<LIGHT_BROWN public="1" get="inline" set="null" expr="cast &quot;LIGHT_BROWN&quot;" line="1149" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "LIGHT_BROWN"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LIGHT_BROWN>
		<DARK_GREEN public="1" get="inline" set="null" expr="cast &quot;DARK_GREEN&quot;" line="1150" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "DARK_GREEN"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DARK_GREEN>
		<DARKISH_BLUE public="1" get="inline" set="null" expr="cast &quot;DARKISH_BLUE&quot;" line="1151" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "DARKISH_BLUE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DARKISH_BLUE>
		<TAN public="1" get="inline" set="null" expr="cast &quot;TAN&quot;" line="1152" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "TAN"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAN>
		<PLUM public="1" get="inline" set="null" expr="cast &quot;PLUM&quot;" line="1153" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "PLUM"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PLUM>
		<ORANGE public="1" get="inline" set="null" expr="cast &quot;ORANGE&quot;" line="1154" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "ORANGE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ORANGE>
		<GREY public="1" get="inline" set="null" expr="cast &quot;GREY&quot;" line="1155" static="1">
			<x path="cornerContour.TurtleCommand"/>
			<meta>
				<m n=":value"><e>cast "GREY"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GREY>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="cornerContour.SketcherGrad" params="" file="src/cornerContour/SketcherGrad.hx">
		<extends path="cornerContour.Sketcher"/>
		<colourFunctionB public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunctionB>
		<colourFunctionC public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunctionC>
		<createContour public="1" set="method" line="7" override="1"><f a=""><c path="cornerContour.IContour"/></f></createContour>
		<lineTo public="1" get="inline" set="null" line="12" override="1"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<new public="1" set="method" line="3"><f a="pen_:sketchForm_:?endLine_">
	<c path="cornerContour.IPen"/>
	<x path="cornerContour.StyleSketch"/>
	<x path="cornerContour.StyleEndLine"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="cornerContour.StyleEndLine" params="" file="src/cornerContour/StyleEndLine.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="cornerContour._StyleEndLine.StyleEndLine_Impl_" params="" file="src/cornerContour/StyleEndLine.hx" private="1" module="cornerContour.StyleEndLine" extern="1" final="1">
	<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="cornerContour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</no>
	<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="cornerContour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</begin>
	<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="cornerContour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</end>
	<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="cornerContour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</both>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour._StyleEndLine.StyleEndLine_Impl_" params="" file="src/cornerContour/StyleEndLine.hx" private="1" module="cornerContour.StyleEndLine" extern="1" final="1">
		<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="cornerContour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</no>
		<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="cornerContour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</begin>
		<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="cornerContour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</end>
		<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="cornerContour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</both>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="cornerContour.StyleSketch" params="" file="src/cornerContour/StyleSketch.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="cornerContour._StyleSketch.StyleSketch_Impl_" params="" file="src/cornerContour/StyleSketch.hx" private="1" module="cornerContour.StyleSketch" extern="1" final="1">
	<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tracer>
	<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Base>
	<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Crude>
	<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FillOnly>
	<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Fine>
	<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FineOverlap>
	<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Medium>
	<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumOverlap>
	<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RoundEnd>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour._StyleSketch.StyleSketch_Impl_" params="" file="src/cornerContour/StyleSketch.hx" private="1" module="cornerContour.StyleSketch" extern="1" final="1">
		<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tracer>
		<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Base>
		<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Crude>
		<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FillOnly>
		<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Fine>
		<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FineOverlap>
		<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Medium>
		<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumOverlap>
		<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RoundEnd>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="cornerContour.color.ColorHelp" params="" file="src/cornerContour/color/ColorHelp.hx">
		<from_argb_ public="1" expr="from_argb">
			<f a="a:r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_argb</e></m></meta>
		</from_argb_>
		<toHexInt_ public="1" expr="toHexInt">
			<f a="c">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>toHexInt</e></m></meta>
		</toHexInt_>
		<alphaChannel_ public="1" expr="alphaChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaChannel</e></m></meta>
		</alphaChannel_>
		<redChannel_ public="1" expr="redChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redChannel</e></m></meta>
		</redChannel_>
		<greenChannel_ public="1" expr="greenChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenChannel</e></m></meta>
		</greenChannel_>
		<blueChannel_ public="1" expr="blueChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueChannel</e></m></meta>
		</blueChannel_>
		<argbInt_ public="1" expr="argbInt">
			<f a="a:r:g:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>argbInt</e></m></meta>
		</argbInt_>
		<alphaAvg_ public="1" expr="alphaAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaAvg</e></m></meta>
		</alphaAvg_>
		<redAvg_ public="1" expr="redAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redAvg</e></m></meta>
		</redAvg_>
		<greenAvg_ public="1" expr="greenAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenAvg</e></m></meta>
		</greenAvg_>
		<blueAvg_ public="1" expr="blueAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueAvg</e></m></meta>
		</blueAvg_>
		<argbIntAvg_ public="1" expr="argbIntAvg">
			<f a="c0:c1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>argbIntAvg</e></m></meta>
		</argbIntAvg_>
		<new public="1" set="method" line="52">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="cornerContour.color._ColorHelp.ColorHelp_Fields_" params="" file="src/cornerContour/color/ColorHelp.hx" private="1" module="cornerContour.color.ColorHelp" final="1">
		<alphaChannel public="1" get="inline" set="null" line="5" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="8" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="11" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="14" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<argbInt public="1" get="inline" set="null" line="17" static="1"><f a="a:r:g:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></argbInt>
		<alphaAvg public="1" get="inline" set="null" line="20" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></alphaAvg>
		<redAvg public="1" get="inline" set="null" line="24" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></redAvg>
		<greenAvg public="1" get="inline" set="null" line="28" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></greenAvg>
		<blueAvg public="1" get="inline" set="null" line="32" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></blueAvg>
		<toHexInt public="1" get="inline" set="null" line="37" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></toHexInt>
		<from_argb public="1" get="inline" set="null" line="40" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_argb>
		<argbIntAvg public="1" get="inline" set="null" line="45" static="1"><f a="c0:c1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></argbIntAvg>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cornerContour.color.ColorWheel24" params="" file="src/cornerContour/color/ColorWheel24.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="cornerContour.color._ColorWheel24.ColorWheel24_Impl_" params="" file="src/cornerContour/color/ColorWheel24.hx" private="1" module="cornerContour.color.ColorWheel24" extern="1" final="1">
	<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffef3c42</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</redRadish>
	<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff25e40</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</orangeSoda>
	<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff2823a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</gokuOrange>
	<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff69537</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</highlighterOrange>
	<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff4aa2f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</carona>
	<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff6c137</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</solarPower>
	<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffad435</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</flirtatious>
	<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffdf32f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</yellowBellied>
	<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffffff2d</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</daffodil>
	<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdff429</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</spoiledEgg>
	<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffa7d52a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</peraRocha>
	<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff79c725</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</appleGreen>
	<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff53c025</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fieldGreen>
	<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff52c67f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</parisGreen>
	<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4daecf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</maximumBlue>
	<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4592ca</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueTourmaline>
	<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3f77c4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</celestialPlum>
	<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3a57bf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</freeSpeechBlue>
	<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3438bd</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</earlySpringNight>
	<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4b27bd</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueDepression>
	<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff7328b6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</nebulaFuchsia>
	<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffb528c5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fuchsiaFlair>
	<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffc32a94</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</royalFuchsia>
	<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
		<x path="cornerContour.color.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdd3371</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fuchsiaPurple>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour.color._ColorWheel24.ColorWheel24_Impl_" params="" file="src/cornerContour/color/ColorWheel24.hx" private="1" module="cornerContour.color.ColorWheel24" extern="1" final="1">
		<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffef3c42</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</redRadish>
		<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff25e40</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</orangeSoda>
		<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff2823a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</gokuOrange>
		<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff69537</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</highlighterOrange>
		<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff4aa2f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</carona>
		<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff6c137</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</solarPower>
		<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffad435</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</flirtatious>
		<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffdf32f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</yellowBellied>
		<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffffff2d</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</daffodil>
		<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdff429</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</spoiledEgg>
		<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffa7d52a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</peraRocha>
		<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff79c725</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</appleGreen>
		<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff53c025</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fieldGreen>
		<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff52c67f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</parisGreen>
		<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4daecf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</maximumBlue>
		<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4592ca</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueTourmaline>
		<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3f77c4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</celestialPlum>
		<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3a57bf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</freeSpeechBlue>
		<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3438bd</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</earlySpringNight>
		<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4b27bd</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueDepression>
		<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff7328b6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</nebulaFuchsia>
		<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffb528c5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fuchsiaFlair>
		<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffc32a94</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</royalFuchsia>
		<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
			<x path="cornerContour.color.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdd3371</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fuchsiaPurple>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="cornerContour.color.TwoGrad_" params="" file="src/cornerContour/color/TwoGrad.hx" module="cornerContour.color.TwoGrad">
		<colorClock public="1"><x path="Int"/></colorClock>
		<colorAnti public="1"><x path="Int"/></colorAnti>
		<new public="1" set="method" line="8"><f a="colorClock:colorAnti">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="cornerContour.color.TwoGrad" params="" file="src/cornerContour/color/TwoGrad.hx">
		<from><icast><c path="cornerContour.color.TwoGrad_"/></icast></from>
		<this><c path="cornerContour.color.TwoGrad_"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="cornerContour.color._TwoGrad.TwoGrad_Impl_" params="" file="src/cornerContour/color/TwoGrad.hx" private="1" module="cornerContour.color.TwoGrad" final="1">
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="colorClock:colorAnti">
			<x path="Int"/>
			<x path="Int"/>
			<x path="cornerContour.color.TwoGrad"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<average public="1" get="inline" set="null" line="20" static="1"><f a="this">
	<c path="cornerContour.color.TwoGrad_"/>
	<x path="Int"/>
</f></average>
</class></impl>
	</abstract>
	<class path="cornerContour.color._TwoGrad.TwoGrad_Impl_" params="" file="src/cornerContour/color/TwoGrad.hx" private="1" module="cornerContour.color.TwoGrad" final="1">
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="colorClock:colorAnti">
				<x path="Int"/>
				<x path="Int"/>
				<x path="cornerContour.color.TwoGrad"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<average public="1" get="inline" set="null" line="20" static="1"><f a="this">
	<c path="cornerContour.color.TwoGrad_"/>
	<x path="Int"/>
</f></average>
	</class>
	<class path="cornerContour.doc.CornerContourDoc" params="" file="src/cornerContour/doc/CornerContourDoc.hx">
		<main public="1" set="method" line="6" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<abstract path="cornerContour.io.Array2DTriGrad" params="" file="src/cornerContour/io/Array2DTriGrad.hx">
		<from><icast><x path="cornerContour.io.Array9"/></icast></from>
		<this><x path="cornerContour.io.Array9"/></this>
		<to><icast><x path="cornerContour.io.Array9"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._Array2DTriGrad.Array2DTriGrad_Impl_" params="" file="src/cornerContour/io/Array2DTriGrad.hx" private="1" module="cornerContour.io.Array2DTriGrad" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a=""><x path="cornerContour.io.Array2DTriGrad"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="cornerContour.io.Array2DTriGrad"/></f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="14" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="22" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="30" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="38" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="46" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="54" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<colorA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorA>
	<get_colorA set="method" line="62" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_colorA>
	<set_colorA set="method" line="65" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorA>
	<colorIntA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntA>
	<get_colorIntA set="method" line="70" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntA>
	<set_colorIntA set="method" line="73" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntA>
	<colorB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorB>
	<get_colorB set="method" line="78" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_colorB>
	<set_colorB set="method" line="81" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorB>
	<colorIntB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntB>
	<get_colorIntB set="method" line="86" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntB>
	<set_colorIntB set="method" line="89" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntB>
	<colorC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorC>
	<get_colorC set="method" line="94" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_colorC>
	<set_colorC set="method" line="97" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorC>
	<colorIntC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntC>
	<get_colorIntC set="method" line="102" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntC>
	<set_colorIntC set="method" line="105" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntC>
	<triangle2DFill public="1" get="inline" set="null" line="113" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
	<triangle2DGrad public="1" get="inline" set="null" line="121" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?colorA_:?colorB_:?colorC_">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
	<triangle public="1" set="method" line="143" static="1">
		<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
			<x path="cornerContour.io.Array9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<adjustWinding public="1" set="method" line="161" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Bool"/>
</f></adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="166" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="170" static="1"><f a="this:x">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="179" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="183" static="1"><f a="this:y">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="192" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="197" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_bottom>
	<moveDelta set="method" line="200" static="1"><f a="this:dx:dy">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<sign public="1" get="inline" set="null" line="209" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="213" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="222" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<fullHit public="1" set="method" line="230" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<rotate public="1" get="inline" set="null" line="235" static="1"><f a="this:x:y:theta">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="241" static="1"><f a="this:x:y:cos:sin">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<prettyString public="1" get="inline" set="null" line="270" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<c path="String"/>
</f></prettyString>
	<hex public="1" get="inline" set="null" line="277" static="1"><f a="this:col">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
	<hexA public="1" get="inline" set="null" line="281" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<c path="String"/>
</f></hexA>
	<hexB public="1" get="inline" set="null" line="285" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<c path="String"/>
</f></hexB>
	<hexC public="1" get="inline" set="null" line="289" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<c path="String"/>
</f></hexC>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour.io._Array2DTriGrad.Array2DTriGrad_Impl_" params="" file="src/cornerContour/io/Array2DTriGrad.hx" private="1" module="cornerContour.io.Array2DTriGrad" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a=""><x path="cornerContour.io.Array2DTriGrad"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="cornerContour.io.Array2DTriGrad"/></f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="14" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="22" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="30" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="38" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="46" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="54" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<colorA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorA>
		<get_colorA set="method" line="62" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_colorA>
		<set_colorA set="method" line="65" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorA>
		<colorIntA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntA>
		<get_colorIntA set="method" line="70" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntA>
		<set_colorIntA set="method" line="73" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntA>
		<colorB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorB>
		<get_colorB set="method" line="78" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_colorB>
		<set_colorB set="method" line="81" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorB>
		<colorIntB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntB>
		<get_colorIntB set="method" line="86" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntB>
		<set_colorIntB set="method" line="89" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntB>
		<colorC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorC>
		<get_colorC set="method" line="94" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_colorC>
		<set_colorC set="method" line="97" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorC>
		<colorIntC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntC>
		<get_colorIntC set="method" line="102" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntC>
		<set_colorIntC set="method" line="105" static="1"><f a="this:v">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntC>
		<triangle2DFill public="1" get="inline" set="null" line="113" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle2DGrad public="1" get="inline" set="null" line="121" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?colorA_:?colorB_:?colorC_">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
		<triangle public="1" set="method" line="143" static="1">
			<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
				<x path="cornerContour.io.Array9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<adjustWinding public="1" set="method" line="161" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Bool"/>
</f></adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="166" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="170" static="1"><f a="this:x">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="179" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="183" static="1"><f a="this:y">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="192" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="197" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
</f></get_bottom>
		<moveDelta set="method" line="200" static="1"><f a="this:dx:dy">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<sign public="1" get="inline" set="null" line="209" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="213" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="222" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="230" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<rotate public="1" get="inline" set="null" line="235" static="1"><f a="this:x:y:theta">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="241" static="1"><f a="this:x:y:cos:sin">
	<x path="cornerContour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<prettyString public="1" get="inline" set="null" line="270" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<c path="String"/>
</f></prettyString>
		<hex public="1" get="inline" set="null" line="277" static="1"><f a="this:col">
	<x path="cornerContour.io.Array9"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<hexA public="1" get="inline" set="null" line="281" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<c path="String"/>
</f></hexA>
		<hexB public="1" get="inline" set="null" line="285" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<c path="String"/>
</f></hexB>
		<hexC public="1" get="inline" set="null" line="289" static="1"><f a="this">
	<x path="cornerContour.io.Array9"/>
	<c path="String"/>
</f></hexC>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cornerContour.io.Array2DTriangles" params="" file="src/cornerContour/io/Array2DTriangles.hx">
		<from><icast><x path="cornerContour.io.Array7"/></icast></from>
		<this><x path="cornerContour.io.Array7"/></this>
		<to><icast><x path="cornerContour.io.Array7"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._Array2DTriangles.Array2DTriangles_Impl_" params="" file="src/cornerContour/io/Array2DTriangles.hx" private="1" module="cornerContour.io.Array2DTriangles" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a=""><x path="cornerContour.io.Array2DTriangles"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="cornerContour.io.Array2DTriangles"/></f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="14" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="22" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="30" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="38" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="46" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="54" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<color public="1" get="accessor" set="accessor" static="1"><x path="Float"/></color>
	<get_color set="method" line="62" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_color>
	<set_color set="method" line="65" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_color>
	<colorInt public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorInt>
	<get_colorInt set="method" line="70" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Int"/>
</f></get_colorInt>
	<set_colorInt set="method" line="73" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorInt>
	<triangle2DFill public="1" get="inline" set="null" line="93" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
	<triangle public="1" set="method" line="105" static="1">
		<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
			<x path="cornerContour.io.Array7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<adjustWinding public="1" set="method" line="123" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Bool"/>
</f></adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="128" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="132" static="1"><f a="this:x">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="141" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="145" static="1"><f a="this:y">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="154" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="159" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_bottom>
	<moveDelta set="method" line="162" static="1"><f a="this:dx:dy">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<sign public="1" get="inline" set="null" line="171" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="175" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="184" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<fullHit public="1" set="method" line="192" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<rotate public="1" get="inline" set="null" line="197" static="1"><f a="this:x:y:theta">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="203" static="1"><f a="this:x:y:cos:sin">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<prettyString public="1" get="inline" set="null" line="232" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<c path="String"/>
</f></prettyString>
	<hex public="1" get="inline" set="null" line="239" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<c path="String"/>
</f></hex>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour.io._Array2DTriangles.Array2DTriangles_Impl_" params="" file="src/cornerContour/io/Array2DTriangles.hx" private="1" module="cornerContour.io.Array2DTriangles" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a=""><x path="cornerContour.io.Array2DTriangles"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="cornerContour.io.Array2DTriangles"/></f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="14" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="22" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="30" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="38" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="46" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="54" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<color public="1" get="accessor" set="accessor" static="1"><x path="Float"/></color>
		<get_color set="method" line="62" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_color>
		<set_color set="method" line="65" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_color>
		<colorInt public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorInt>
		<get_colorInt set="method" line="70" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Int"/>
</f></get_colorInt>
		<set_colorInt set="method" line="73" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorInt>
		<triangle2DFill public="1" get="inline" set="null" line="93" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle public="1" set="method" line="105" static="1">
			<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
				<x path="cornerContour.io.Array7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<adjustWinding public="1" set="method" line="123" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Bool"/>
</f></adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="128" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="132" static="1"><f a="this:x">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="141" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="145" static="1"><f a="this:y">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="154" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="159" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_bottom>
		<moveDelta set="method" line="162" static="1"><f a="this:dx:dy">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<sign public="1" get="inline" set="null" line="171" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="175" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="184" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="192" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<rotate public="1" get="inline" set="null" line="197" static="1"><f a="this:x:y:theta">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="203" static="1"><f a="this:x:y:cos:sin">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<prettyString public="1" get="inline" set="null" line="232" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<c path="String"/>
</f></prettyString>
		<hex public="1" get="inline" set="null" line="239" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<c path="String"/>
</f></hex>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cornerContour.io.Array7" params="" file="src/cornerContour/io/Array7.hx">
		<this><x path="cornerContour.io.ArrayFlatDepth"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._Array7.Array7_Impl_" params="" file="src/cornerContour/io/Array7.hx" private="1" module="cornerContour.io.Array7" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="cornerContour.io.ArrayFlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="cornerContour.io.Array7"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="cornerContour.io._Array7.Array7_Impl_" params="" file="src/cornerContour/io/Array7.hx" private="1" module="cornerContour.io.Array7" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="cornerContour.io.ArrayFlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="cornerContour.io.Array7"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<abstract path="cornerContour.io.Array9" params="" file="src/cornerContour/io/Array9.hx">
		<this><x path="cornerContour.io.ArrayFlatDepth"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._Array9.Array9_Impl_" params="" file="src/cornerContour/io/Array9.hx" private="1" module="cornerContour.io.Array9" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="cornerContour.io.ArrayFlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="cornerContour.io.Array9"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="cornerContour.io._Array9.Array9_Impl_" params="" file="src/cornerContour/io/Array9.hx" private="1" module="cornerContour.io.Array9" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="cornerContour.io.ArrayFlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="cornerContour.io.Array9"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<abstract path="cornerContour.io.ArrayFlat" params="" file="src/cornerContour/io/ArrayFlat.hx">
		<this><c path="Array"><x path="Float"/></c></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._ArrayFlat.ArrayFlat_Impl_" params="" file="src/cornerContour/io/ArrayFlat.hx" private="1" module="cornerContour.io.ArrayFlat" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1">
		<f a="this:k:v">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="cornerContour.io.ArrayFlat"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<size public="1" get="accessor" set="null" static="1"><x path="Int"/></size>
	<get_size get="inline" set="null" line="24" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_size>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="29" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="33" static="1"><f a="this:id">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="39" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="43" static="1"><f a="this:pos_">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<hasNext public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></next>
	<increment public="1" get="inline" set="null" line="55" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</increment>
	<setArray public="1" get="inline" set="null" line="59" static="1"><f a="this:arr">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setArray>
	<clone public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="cornerContour.io.ArrayFlat"/>
</f></clone>
</class></impl>
	</abstract>
	<class path="cornerContour.io._ArrayFlat.ArrayFlat_Impl_" params="" file="src/cornerContour/io/ArrayFlat.hx" private="1" module="cornerContour.io.ArrayFlat" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1">
			<f a="this:k:v">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="cornerContour.io.ArrayFlat"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<size public="1" get="accessor" set="null" static="1"><x path="Int"/></size>
		<get_size get="inline" set="null" line="24" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_size>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="29" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="33" static="1"><f a="this:id">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="39" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="43" static="1"><f a="this:pos_">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<hasNext public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></next>
		<increment public="1" get="inline" set="null" line="55" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</increment>
		<setArray public="1" get="inline" set="null" line="59" static="1"><f a="this:arr">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setArray>
		<clone public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="cornerContour.io.ArrayFlat"/>
</f></clone>
	</class>
	<abstract path="cornerContour.io.ArrayFlatDepth" params="" file="src/cornerContour/io/ArrayFlatDepth.hx">
		<this><x path="cornerContour.io.ArrayFlat"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_" params="" file="src/cornerContour/io/ArrayFlatDepth.hx" private="1" module="cornerContour.io.ArrayFlatDepth" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a=""><x path="cornerContour.io.ArrayFlatDepth"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<getArray public="1" get="inline" set="null" line="12" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlat"/>
	<t path="cornerContour.io.Float32Array"/>
</f></getArray>
	<rangeToEnd public="1" set="method" line="20" static="1"><f a="this:starting:totalLen:section">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
	<rangeToStart public="1" get="inline" set="null" line="44" static="1"><f a="this:starting:totalLen">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
	<rangeSwitch public="1" get="inline" set="null" line="69" static="1"><f a="this:start0:start1:totalLen">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_" params="" file="src/cornerContour/io/ArrayFlatDepth.hx" private="1" module="cornerContour.io.ArrayFlatDepth" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a=""><x path="cornerContour.io.ArrayFlatDepth"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<getArray public="1" get="inline" set="null" line="12" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlat"/>
	<t path="cornerContour.io.Float32Array"/>
</f></getArray>
		<rangeToEnd public="1" set="method" line="20" static="1"><f a="this:starting:totalLen:section">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
		<rangeToStart public="1" get="inline" set="null" line="44" static="1"><f a="this:starting:totalLen">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
		<rangeSwitch public="1" get="inline" set="null" line="69" static="1"><f a="this:start0:start1:totalLen">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cornerContour.io.ColorTriangles2D" params="" file="src/cornerContour/io/ColorTriangles2D.hx">
		<this><x path="cornerContour.io.Flat3x6"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._ColorTriangles2D.ColorTriangles2D_Impl_" params="" file="src/cornerContour/io/ColorTriangles2D.hx" private="1" module="cornerContour.io.ColorTriangles2D" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="cornerContour.io.ColorTriangles2D"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="11" static="1"><f a="len">
	<x path="Int"/>
	<x path="cornerContour.io.ColorTriangles2D"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="15" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="18" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="23" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
	<get_redA set="method" line="32" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redA>
	<set_redA set="method" line="35" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
	<get_greenA get="inline" set="null" line="42" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenA>
	<set_greenA get="inline" set="null" line="46" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
	<get_blueA get="inline" set="null" line="52" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueA>
	<set_blueA get="inline" set="null" line="56" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
	<get_alphaA get="inline" set="null" line="62" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaA>
	<set_alphaA get="inline" set="null" line="66" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="72" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="75" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="80" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="83" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
	<get_redB set="method" line="89" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redB>
	<set_redB set="method" line="92" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
	<get_greenB get="inline" set="null" line="100" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenB>
	<set_greenB get="inline" set="null" line="104" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
	<get_blueB get="inline" set="null" line="110" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueB>
	<set_blueB get="inline" set="null" line="114" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
	<get_alphaB get="inline" set="null" line="120" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaB>
	<set_alphaB get="inline" set="null" line="124" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="130" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="133" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="138" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="141" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
	<get_redC set="method" line="147" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redC>
	<set_redC set="method" line="150" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
	<get_greenC get="inline" set="null" line="157" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenC>
	<set_greenC get="inline" set="null" line="161" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
	<get_blueC get="inline" set="null" line="167" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueC>
	<set_blueC get="inline" set="null" line="171" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
	<get_alphaC get="inline" set="null" line="177" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaC>
	<set_alphaC get="inline" set="null" line="181" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
	<triangle public="1" set="method" line="188" static="1">
		<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
			<x path="cornerContour.io.Flat3x6"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<adjustWinding public="1" set="method" line="207" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Bool"/>
</f></adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="212" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="216" static="1"><f a="this:x">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="225" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="229" static="1"><f a="this:y">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="239" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="244" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_bottom>
	<translate public="1" get="inline" set="null" line="248" static="1"><f a="this:dx:dy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
	<translateRange public="1" get="inline" set="null" line="258" static="1"><f a="this:range:dx:dy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translateRange>
	<alphaRange public="1" get="inline" set="null" line="268" static="1"><f a="this:range:a">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></alphaRange>
	<argbRange public="1" get="inline" set="null" line="277" static="1"><f a="this:range:argb_">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></argbRange>
	<rgbRange public="1" get="inline" set="null" line="286" static="1"><f a="this:range:rgb_">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rgbRange>
	<sign public="1" get="inline" set="null" line="295" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="299" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="308" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<hitRange public="1" set="method" line="315" static="1"><f a="this:range:px:py">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitRange>
	<rangeCollisionRough public="1" get="inline" set="null" line="329" static="1"><f a="this:range1:range2">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Bool"/>
</f></rangeCollisionRough>
	<fullHit public="1" set="method" line="347" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<rotateRange public="1" get="inline" set="null" line="353" static="1"><f a="this:range:x:y:theta">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateRange>
	<rotate public="1" get="inline" set="null" line="362" static="1"><f a="this:x:y:theta">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="368" static="1"><f a="this:x:y:cos:sin">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="397" static="1"><f a="this:color:times">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="404" static="1"><f a="this:colorA:colorB:colorC">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<blendColorRange public="1" get="inline" set="null" line="411" static="1">
		<f a="this:color:range:t:?smooth" v="::::true">
			<x path="cornerContour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="cornerContour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColorRange>
	<blendBetweenColorRange public="1" get="inline" set="null" line="422" static="1">
		<f a="this:color:color2:range:t:?smooth" v=":::::true">
			<x path="cornerContour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="cornerContour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColorRange>
	<blendColorsRange public="1" get="inline" set="null" line="433" static="1">
		<f a="this:colorA:colorB:colorC:range:t:?smooth" v="::::::true">
			<x path="cornerContour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="cornerContour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColorsRange>
	<blendBetweenColorsRange public="1" get="inline" set="null" line="445" static="1">
		<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:range:t:?smooth" v=":::::::::true">
			<x path="cornerContour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="cornerContour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColorsRange>
	<boundingRange public="1" get="inline" set="null" line="454" static="1"><f a="this:range">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
</f></boundingRange>
	<scaleRangeXY public="1" get="inline" set="null" line="480" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXY>
	<scaleRangeXB public="1" get="inline" set="null" line="499" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXB>
	<scaleRangeRY public="1" get="inline" set="null" line="518" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRY>
	<scaleRangeRB public="1" get="inline" set="null" line="537" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRB>
	<scaleRangeCentre public="1" get="inline" set="null" line="586" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeCentre>
	<blendBetweenColors public="1" get="inline" set="null" line="613" static="1">
		<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:t:?smooth" v="::::::::true">
			<x path="cornerContour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColors>
	<blendBetweenColor public="1" get="inline" set="null" line="656" static="1">
		<f a="this:color:color2:t:?smooth" v="::::true">
			<x path="cornerContour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColor>
	<blendColor public="1" get="inline" set="null" line="682" static="1">
		<f a="this:color:t:?smooth" v=":::true">
			<x path="cornerContour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColor>
	<blendColors public="1" get="inline" set="null" line="705" static="1">
		<f a="this:colorA:colorB:colorC:t:?smooth" v=":::::true">
			<x path="cornerContour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColors>
	<alpha public="1" get="null" set="accessor" static="1"><x path="Float"/></alpha>
	<set_alpha get="inline" set="null" line="736" static="1"><f a="this:a">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
	<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
	<set_rgb get="inline" set="null" line="744" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
	<set_rgbA get="inline" set="null" line="752" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
	<get_rgbA get="inline" set="null" line="760" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
	<set_rgbB get="inline" set="null" line="767" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
	<get_rgbB get="inline" set="null" line="775" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
	<set_rgbC get="inline" set="null" line="782" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
	<get_rgbC get="inline" set="null" line="790" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbC>
	<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
	<set_argb get="inline" set="null" line="797" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
	<set_argbA get="inline" set="null" line="805" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<get_argbA get="inline" set="null" line="813" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
	<set_argbB get="inline" set="null" line="821" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<get_argbB get="inline" set="null" line="829" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
	<set_argbC get="inline" set="null" line="837" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<get_argbC get="inline" set="null" line="845" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="852" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="858" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></prettyAllVert>
	<hex public="1" get="inline" set="null" line="869" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
	<hexA public="1" get="inline" set="null" line="873" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></hexA>
	<hexB public="1" get="inline" set="null" line="877" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></hexB>
	<hexC public="1" get="inline" set="null" line="881" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></hexC>
	<hexAll public="1" get="inline" set="null" line="885" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></hexAll>
	<blend get="inline" set="null" line="896" static="1"><f a="this:a:b:t">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></blend>
	<smootherStep get="inline" set="null" line="901" static="1"><f a="this:t">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smootherStep>
	<alphaChannel public="1" get="inline" set="null" line="906" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="909" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="912" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="915" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="cornerContour.io._ColorTriangles2D.ColorTriangles2D_Impl_" params="" file="src/cornerContour/io/ColorTriangles2D.hx" private="1" module="cornerContour.io.ColorTriangles2D" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="cornerContour.io.ColorTriangles2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="11" static="1"><f a="len">
	<x path="Int"/>
	<x path="cornerContour.io.ColorTriangles2D"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="15" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="18" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="23" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
		<get_redA set="method" line="32" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redA>
		<set_redA set="method" line="35" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
		<get_greenA get="inline" set="null" line="42" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenA>
		<set_greenA get="inline" set="null" line="46" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
		<get_blueA get="inline" set="null" line="52" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueA>
		<set_blueA get="inline" set="null" line="56" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
		<get_alphaA get="inline" set="null" line="62" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaA>
		<set_alphaA get="inline" set="null" line="66" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="72" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="75" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="80" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="83" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
		<get_redB set="method" line="89" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redB>
		<set_redB set="method" line="92" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
		<get_greenB get="inline" set="null" line="100" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenB>
		<set_greenB get="inline" set="null" line="104" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
		<get_blueB get="inline" set="null" line="110" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueB>
		<set_blueB get="inline" set="null" line="114" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
		<get_alphaB get="inline" set="null" line="120" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaB>
		<set_alphaB get="inline" set="null" line="124" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="130" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="133" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="138" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="141" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
		<get_redC set="method" line="147" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redC>
		<set_redC set="method" line="150" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
		<get_greenC get="inline" set="null" line="157" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenC>
		<set_greenC get="inline" set="null" line="161" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
		<get_blueC get="inline" set="null" line="167" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueC>
		<set_blueC get="inline" set="null" line="171" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
		<get_alphaC get="inline" set="null" line="177" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaC>
		<set_alphaC get="inline" set="null" line="181" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
		<triangle public="1" set="method" line="188" static="1">
			<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
				<x path="cornerContour.io.Flat3x6"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<adjustWinding public="1" set="method" line="207" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Bool"/>
</f></adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="212" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="216" static="1"><f a="this:x">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="225" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="229" static="1"><f a="this:y">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="239" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="244" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_bottom>
		<translate public="1" get="inline" set="null" line="248" static="1"><f a="this:dx:dy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<translateRange public="1" get="inline" set="null" line="258" static="1"><f a="this:range:dx:dy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translateRange>
		<alphaRange public="1" get="inline" set="null" line="268" static="1"><f a="this:range:a">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></alphaRange>
		<argbRange public="1" get="inline" set="null" line="277" static="1"><f a="this:range:argb_">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></argbRange>
		<rgbRange public="1" get="inline" set="null" line="286" static="1"><f a="this:range:rgb_">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rgbRange>
		<sign public="1" get="inline" set="null" line="295" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="299" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="308" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<hitRange public="1" set="method" line="315" static="1"><f a="this:range:px:py">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitRange>
		<rangeCollisionRough public="1" get="inline" set="null" line="329" static="1"><f a="this:range1:range2">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Bool"/>
</f></rangeCollisionRough>
		<fullHit public="1" set="method" line="347" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<rotateRange public="1" get="inline" set="null" line="353" static="1"><f a="this:range:x:y:theta">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateRange>
		<rotate public="1" get="inline" set="null" line="362" static="1"><f a="this:x:y:theta">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="368" static="1"><f a="this:x:y:cos:sin">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="397" static="1"><f a="this:color:times">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="404" static="1"><f a="this:colorA:colorB:colorC">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<blendColorRange public="1" get="inline" set="null" line="411" static="1">
			<f a="this:color:range:t:?smooth" v="::::true">
				<x path="cornerContour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="cornerContour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColorRange>
		<blendBetweenColorRange public="1" get="inline" set="null" line="422" static="1">
			<f a="this:color:color2:range:t:?smooth" v=":::::true">
				<x path="cornerContour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cornerContour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColorRange>
		<blendColorsRange public="1" get="inline" set="null" line="433" static="1">
			<f a="this:colorA:colorB:colorC:range:t:?smooth" v="::::::true">
				<x path="cornerContour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cornerContour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColorsRange>
		<blendBetweenColorsRange public="1" get="inline" set="null" line="445" static="1">
			<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:range:t:?smooth" v=":::::::::true">
				<x path="cornerContour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cornerContour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColorsRange>
		<boundingRange public="1" get="inline" set="null" line="454" static="1"><f a="this:range">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
</f></boundingRange>
		<scaleRangeXY public="1" get="inline" set="null" line="480" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXY>
		<scaleRangeXB public="1" get="inline" set="null" line="499" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXB>
		<scaleRangeRY public="1" get="inline" set="null" line="518" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRY>
		<scaleRangeRB public="1" get="inline" set="null" line="537" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRB>
		<scaleRangeCentre public="1" get="inline" set="null" line="586" static="1"><f a="this:range:sx:sy">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeCentre>
		<blendBetweenColors public="1" get="inline" set="null" line="613" static="1">
			<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:t:?smooth" v="::::::::true">
				<x path="cornerContour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColors>
		<blendBetweenColor public="1" get="inline" set="null" line="656" static="1">
			<f a="this:color:color2:t:?smooth" v="::::true">
				<x path="cornerContour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColor>
		<blendColor public="1" get="inline" set="null" line="682" static="1">
			<f a="this:color:t:?smooth" v=":::true">
				<x path="cornerContour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColor>
		<blendColors public="1" get="inline" set="null" line="705" static="1">
			<f a="this:colorA:colorB:colorC:t:?smooth" v=":::::true">
				<x path="cornerContour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColors>
		<alpha public="1" get="null" set="accessor" static="1"><x path="Float"/></alpha>
		<set_alpha get="inline" set="null" line="736" static="1"><f a="this:a">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
		<set_rgb get="inline" set="null" line="744" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
		<set_rgbA get="inline" set="null" line="752" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
		<get_rgbA get="inline" set="null" line="760" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
		<set_rgbB get="inline" set="null" line="767" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
		<get_rgbB get="inline" set="null" line="775" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
		<set_rgbC get="inline" set="null" line="782" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
		<get_rgbC get="inline" set="null" line="790" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbC>
		<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="797" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
		<set_argbA get="inline" set="null" line="805" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
		<get_argbA get="inline" set="null" line="813" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
		<set_argbB get="inline" set="null" line="821" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
		<get_argbB get="inline" set="null" line="829" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
		<set_argbC get="inline" set="null" line="837" static="1"><f a="this:col">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
		<get_argbC get="inline" set="null" line="845" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="852" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="858" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></prettyAllVert>
		<hex public="1" get="inline" set="null" line="869" static="1"><f a="this:v">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<hexA public="1" get="inline" set="null" line="873" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></hexA>
		<hexB public="1" get="inline" set="null" line="877" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></hexB>
		<hexC public="1" get="inline" set="null" line="881" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></hexC>
		<hexAll public="1" get="inline" set="null" line="885" static="1"><f a="this">
	<x path="cornerContour.io.Flat3x6"/>
	<c path="String"/>
</f></hexAll>
		<blend get="inline" set="null" line="896" static="1"><f a="this:a:b:t">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></blend>
		<smootherStep get="inline" set="null" line="901" static="1"><f a="this:t">
	<x path="cornerContour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smootherStep>
		<alphaChannel public="1" get="inline" set="null" line="906" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="909" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="912" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="915" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<abstract path="cornerContour.io.Flat3x6" params="" file="src/cornerContour/io/Flat3x6.hx">
		<from><icast><x path="cornerContour.io.Float32FlatDepth"/></icast></from>
		<this><x path="cornerContour.io.Float32FlatDepth"/></this>
		<to><icast><x path="cornerContour.io.Float32FlatDepth"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._Flat3x6.Flat3x6_Impl_" params="" file="src/cornerContour/io/Flat3x6.hx" private="1" module="cornerContour.io.Flat3x6" final="1">
	<readItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k">
			<x path="cornerContour.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="14" static="1">
		<f a="this:k:v">
			<x path="cornerContour.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="cornerContour.io.Flat3x6"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="24" static="1"><f a="this">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="28" static="1"><f a="this:id">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<getFloat32Array public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<t path="cornerContour.io.Float32Array"/>
</f></getFloat32Array>
	<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="cornerContour.io._Flat3x6.Flat3x6_Impl_" params="" file="src/cornerContour/io/Flat3x6.hx" private="1" module="cornerContour.io.Flat3x6" final="1">
		<readItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k">
				<x path="cornerContour.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="14" static="1">
			<f a="this:k:v">
				<x path="cornerContour.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="cornerContour.io.Flat3x6"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="24" static="1"><f a="this">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="28" static="1"><f a="this:id">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<getFloat32Array public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<t path="cornerContour.io.Float32Array"/>
</f></getFloat32Array>
		<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="cornerContour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<typedef path="cornerContour.io.Float32Array" params="" file="src/cornerContour/io/Float32Array.hx">
		<x path="haxe.io.Float32Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.Float32Array</haxe_doc>
	</typedef>
	<abstract path="cornerContour.io.Float32Flat" params="" file="src/cornerContour/io/Float32Flat.hx">
		<from><icast field="fromArray"><t path="cornerContour.io.Float32Array"/></icast></from>
		<this><t path="cornerContour.io.Float32Array"/></this>
		<to><icast field="toArray"><x path="haxe.io.Float32Array"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._Float32Flat.Float32Flat_Impl_" params="" file="src/cornerContour/io/Float32Flat.hx" private="1" module="cornerContour.io.Float32Flat" final="1">
	<readItem public="1" get="inline" set="null" line="19" static="1">
		<f a="this:k">
			<t path="cornerContour.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="32" static="1">
		<f a="this:k:v">
			<t path="cornerContour.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</writeItem>
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="cornerContour.io.Float32Flat"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
	<get_size get="inline" set="null" line="44" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
</f></get_size>
	<set_size get="inline" set="null" line="49" static="1"><f a="this:id">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="55" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="59" static="1"><f a="this:id">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="65" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="69" static="1"><f a="this:pos_">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<fits public="1" get="inline" set="null" line="75" static="1"><f a="this:k">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></fits>
	<resize public="1" get="inline" set="null" line="84" static="1"><f a="this:l">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
	<optimiseLength public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
</f></optimiseLength>
	<updateLen get="inline" set="null" line="111" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Void"/>
</f></updateLen>
	<hasNext public="1" get="inline" set="null" line="117" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="119" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Float"/>
</f></next>
	<increment public="1" get="inline" set="null" line="133" static="1">
		<f a="this">
			<t path="cornerContour.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="138" static="1">
		<f a="this">
			<t path="cornerContour.io.Float32Array"/>
			<t path="cornerContour.io.Float32Array"/>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="143" static="1">
		<f a="arr">
			<t path="cornerContour.io.Float32Array"/>
			<x path="cornerContour.io.Float32Flat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="149" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="cornerContour.io.Float32Flat"/>
</f></clone>
	<fill public="1" get="inline" set="null" line="155" static="1"><f a="this:arr">
	<t path="cornerContour.io.Float32Array"/>
	<t path="cornerContour.io.Float32Array"/>
	<x path="Void"/>
</f></fill>
</class></impl>
	</abstract>
	<class path="cornerContour.io._Float32Flat.Float32Flat_Impl_" params="" file="src/cornerContour/io/Float32Flat.hx" private="1" module="cornerContour.io.Float32Flat" final="1">
		<readItem public="1" get="inline" set="null" line="19" static="1">
			<f a="this:k">
				<t path="cornerContour.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="32" static="1">
			<f a="this:k:v">
				<t path="cornerContour.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</writeItem>
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="cornerContour.io.Float32Flat"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
		<get_size get="inline" set="null" line="44" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
</f></get_size>
		<set_size get="inline" set="null" line="49" static="1"><f a="this:id">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="55" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="59" static="1"><f a="this:id">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="65" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="69" static="1"><f a="this:pos_">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<fits public="1" get="inline" set="null" line="75" static="1"><f a="this:k">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></fits>
		<resize public="1" get="inline" set="null" line="84" static="1"><f a="this:l">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<optimiseLength public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Int"/>
</f></optimiseLength>
		<updateLen get="inline" set="null" line="111" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Void"/>
</f></updateLen>
		<hasNext public="1" get="inline" set="null" line="117" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="119" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="Float"/>
</f></next>
		<increment public="1" get="inline" set="null" line="133" static="1">
			<f a="this">
				<t path="cornerContour.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="138" static="1">
			<f a="this">
				<t path="cornerContour.io.Float32Array"/>
				<t path="cornerContour.io.Float32Array"/>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="143" static="1">
			<f a="arr">
				<t path="cornerContour.io.Float32Array"/>
				<x path="cornerContour.io.Float32Flat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="149" static="1"><f a="this">
	<t path="cornerContour.io.Float32Array"/>
	<x path="cornerContour.io.Float32Flat"/>
</f></clone>
		<fill public="1" get="inline" set="null" line="155" static="1"><f a="this:arr">
	<t path="cornerContour.io.Float32Array"/>
	<t path="cornerContour.io.Float32Array"/>
	<x path="Void"/>
</f></fill>
	</class>
	<abstract path="cornerContour.io.Float32FlatDepth" params="" file="src/cornerContour/io/Float32FlatDepth.hx">
		<this><x path="cornerContour.io.Float32Flat"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._Float32FlatDepth.Float32FlatDepth_Impl_" params="" file="src/cornerContour/io/Float32FlatDepth.hx" private="1" module="cornerContour.io.Float32FlatDepth" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="cornerContour.io.Float32FlatDepth"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<rangeToEnd public="1" set="method" line="12" static="1"><f a="this:starting:totalLen:section">
	<x path="cornerContour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
	<rangeToStart public="1" get="inline" set="null" line="38" static="1"><f a="this:starting:totalLen">
	<x path="cornerContour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
	<rangeSwitch public="1" get="inline" set="null" line="65" static="1"><f a="this:start0:start1:totalLen">
	<x path="cornerContour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour.io._Float32FlatDepth.Float32FlatDepth_Impl_" params="" file="src/cornerContour/io/Float32FlatDepth.hx" private="1" module="cornerContour.io.Float32FlatDepth" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="cornerContour.io.Float32FlatDepth"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<rangeToEnd public="1" set="method" line="12" static="1"><f a="this:starting:totalLen:section">
	<x path="cornerContour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
		<rangeToStart public="1" get="inline" set="null" line="38" static="1"><f a="this:starting:totalLen">
	<x path="cornerContour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
		<rangeSwitch public="1" get="inline" set="null" line="65" static="1"><f a="this:start0:start1:totalLen">
	<x path="cornerContour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContour.io.IntIterStart" params="" file="src/cornerContour/io/IteratorRange.hx" module="cornerContour.io.IteratorRange">
		<start public="1"><x path="Int"/></start>
		<max public="1"><x path="Int"/></max>
		<new public="1" set="method" line="7"><f a="min_:max_">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="cornerContour.io.IteratorRange" params="" file="src/cornerContour/io/IteratorRange.hx">
		<from>
			<icast><c path="cornerContour.io.IntIterStart"/></icast>
			<icast field="fromIterator"><c path="IntIterator"/></icast>
		</from>
		<this><c path="cornerContour.io.IntIterStart"/></this>
		<to><icast field="toIterStart"><x path="cornerContour.io.IteratorRange"/></icast></to>
		<meta>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._IteratorRange.IteratorRange_Impl_" params="" file="src/cornerContour/io/IteratorRange.hx" private="1" module="cornerContour.io.IteratorRange" final="1">
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="min:max">
			<x path="Int"/>
			<x path="Int"/>
			<x path="cornerContour.io.IteratorRange"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator public="1" get="inline" set="null" line="21" static="1">
		<f a="ii">
			<c path="IntIterator"/>
			<x path="cornerContour.io.IteratorRange"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator>
	<toIterStart set="method" line="25" static="1">
		<f a="this">
			<c path="cornerContour.io.IntIterStart"/>
			<x path="cornerContour.io.IteratorRange"/>
		</f>
		<meta><m n=":to"/></meta>
	</toIterStart>
	<iterator public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="cornerContour.io.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
	<adding public="1" get="inline" set="null" line="32" static="1">
		<f a="a:b">
			<x path="cornerContour.io.IteratorRange"/>
			<x path="cornerContour.io.IteratorRange"/>
			<x path="cornerContour.io.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="36" static="1"><f a="this:b">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="cornerContour.io.IteratorRange"/>
</f></add>
	<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="44" static="1"><f a="this">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
	<set_length get="inline" set="null" line="48" static="1"><f a="this:l">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
	<contains public="1" get="inline" set="null" line="53" static="1"><f a="this:v">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<isWithin public="1" get="inline" set="null" line="57" static="1"><f a="this:ir">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
	<moveRange public="1" get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
	<addAssign public="1" get="inline" set="null" line="67" static="1">
		<f a="a:v">
			<x path="cornerContour.io.IteratorRange"/>
			<x path="Int"/>
			<x path="cornerContour.io.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</addAssign>
	<minusAssign public="1" get="inline" set="null" line="73" static="1">
		<f a="a:v">
			<x path="cornerContour.io.IteratorRange"/>
			<x path="Int"/>
			<x path="cornerContour.io.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</minusAssign>
	<ifContainMove public="1" get="inline" set="null" line="77" static="1"><f a="this:v:amount">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="cornerContour.io._IteratorRange.IteratorRange_Impl_" params="" file="src/cornerContour/io/IteratorRange.hx" private="1" module="cornerContour.io.IteratorRange" final="1">
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="cornerContour.io.IteratorRange"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator public="1" get="inline" set="null" line="21" static="1">
			<f a="ii">
				<c path="IntIterator"/>
				<x path="cornerContour.io.IteratorRange"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator>
		<toIterStart set="method" line="25" static="1">
			<f a="this">
				<c path="cornerContour.io.IntIterStart"/>
				<x path="cornerContour.io.IteratorRange"/>
			</f>
			<meta><m n=":to"/></meta>
		</toIterStart>
		<iterator public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="cornerContour.io.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
		<adding public="1" get="inline" set="null" line="32" static="1">
			<f a="a:b">
				<x path="cornerContour.io.IteratorRange"/>
				<x path="cornerContour.io.IteratorRange"/>
				<x path="cornerContour.io.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="36" static="1"><f a="this:b">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="cornerContour.io.IteratorRange"/>
</f></add>
		<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="44" static="1"><f a="this">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
		<set_length get="inline" set="null" line="48" static="1"><f a="this:l">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
		<contains public="1" get="inline" set="null" line="53" static="1"><f a="this:v">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<isWithin public="1" get="inline" set="null" line="57" static="1"><f a="this:ir">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="cornerContour.io.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
		<moveRange public="1" get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
		<addAssign public="1" get="inline" set="null" line="67" static="1">
			<f a="a:v">
				<x path="cornerContour.io.IteratorRange"/>
				<x path="Int"/>
				<x path="cornerContour.io.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</addAssign>
		<minusAssign public="1" get="inline" set="null" line="73" static="1">
			<f a="a:v">
				<x path="cornerContour.io.IteratorRange"/>
				<x path="Int"/>
				<x path="cornerContour.io.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</minusAssign>
		<ifContainMove public="1" get="inline" set="null" line="77" static="1"><f a="this:v:amount">
	<c path="cornerContour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<class path="cornerContour.shape.Circles" params="" file="src/cornerContour/shape/Circles.hx">
		<circle_ public="1" expr="circle">
			<f a="pen:ax:ay:radius:?color:?sides:?omega">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circle</e></m></meta>
		</circle_>
		<circleRadial_ public="1" expr="circleRadial">
			<f a="pen:ax:ay:rx:ry:radius:?color:?sides:?omega">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadial</e></m></meta>
		</circleRadial_>
		<circleRadialOnSide_ public="1" expr="circleRadialOnSide">
			<f a="pen:ax:ay:rx:ry:radius:color:?sides:?omega">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Null"><x path="Int"/></x>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadialOnSide</e></m></meta>
		</circleRadialOnSide_>
		<new public="1" set="method" line="131">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="cornerContour.shape._Circles.Circles_Fields_" params="" file="src/cornerContour/shape/Circles.hx" private="1" module="cornerContour.shape.Circles" final="1">
		<circle public="1" get="inline" set="null" line="8" static="1">
			<f a="pen:ax:ay:radius:?color:?sides:?omega" v=":::::36:0.">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circle>
		<circleOutline public="1" get="inline" set="null" line="33" static="1">
			<f a="pen:ax:ay:radius:thick:?color:?sides:?omega" v="::::::36:0.">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleOutline>
		<circleRadial public="1" get="inline" set="null" line="71" static="1">
			<f a="pen:ax:ay:rx:ry:radius:?color:?sides:?omega" v=":::::::36:0.">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadial>
		<circleRadialOnSide public="1" get="inline" set="null" line="102" static="1">
			<f a="pen:ax:ay:rx:ry:radius:color:?sides:?omega" v=":::::::36:0.">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Null"><x path="Int"/></x>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadialOnSide>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContour.shape.Ellipses" params="" file="src/cornerContour/shape/Ellipses.hx">
		<ellipse_ public="1" expr="ellipse">
			<f a="pen:ax:ay:rx:ry:?color:?sides">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipse</e></m></meta>
		</ellipse_>
		<ellipsePie_ public="1" expr="ellipsePie">
			<f a="pen:ax:ay:rx:ry:beta:gamma:prefer:?color:?sides">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipsePie</e></m></meta>
		</ellipsePie_>
		<new public="1" set="method" line="97">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="cornerContour.shape._Ellipses.Ellipses_Fields_" params="" file="src/cornerContour/shape/Ellipses.hx" private="1" module="cornerContour.shape.Ellipses" final="1">
		<ellipse public="1" get="inline" set="null" line="10" static="1">
			<f a="pen:ax:ay:rx:ry:?color:?sides" v="::::::36">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipse>
		<ellipseOutline public="1" get="inline" set="null" line="34" static="1">
			<f a="pen:ax:ay:rx:ry:thick:?color:?sides" v=":::::::36">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipseOutline>
		<ellipsePie public="1" get="inline" set="null" line="70" static="1">
			<f a="pen:ax:ay:rx:ry:beta:gamma:prefer:?color:?sides" v=":::::::::36">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipsePie>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContour.shape.Lines" params="" file="src/cornerContour/shape/Lines.hx">
		<lineAB_ public="1" expr="lineAB">
			<f a="pen:A:B:width:?color">
				<c path="cornerContour.IPen"/>
				<c path="cornerContour.shape.structs.XY"/>
				<c path="cornerContour.shape.structs.XY"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineAB</e></m></meta>
		</lineAB_>
		<lineXY_ public="1" expr="lineXY">
			<f a="pen:ax:ay:bx:by:width:?color">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineXY</e></m></meta>
		</lineXY_>
		<new public="1" set="method" line="71">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="cornerContour.shape._Lines.Lines_Fields_" params="" file="src/cornerContour/shape/Lines.hx" private="1" module="cornerContour.shape.Lines" final="1">
		<lineAB public="1" get="inline" set="null" line="10" static="1"><f a="pen:A:B:width:?color">
	<c path="cornerContour.IPen"/>
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lineAB>
		<lineXY public="1" get="inline" set="null" line="17" static="1"><f a="pen:ax:ay:bx:by:width:?color">
	<c path="cornerContour.IPen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lineXY>
		<lineABmath public="1" get="inline" set="null" line="23" static="1"><f a="A:B:width">
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Quad2D"/>
</f></lineABmath>
		<lineABCoordMath public="1" get="inline" set="null" line="33" static="1"><f a="ax:ay:bx:by:width">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Quad2D"/>
</f></lineABCoordMath>
		<rotateVectorLine public="1" get="inline" set="null" line="42" static="1"><f a="pos:dim:omega:pivotX:pivotY">
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Quad2D"/>
</f></rotateVectorLine>
		<pivotCheap public="1" get="inline" set="null" line="64" static="1"><f a="p:sin:cos:pivotX:pivotY">
	<c path="cornerContour.shape.structs.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="cornerContour.shape.structs.XY"/>
</f></pivotCheap>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContour.shape.Pies" params="" file="src/cornerContour/shape/Pies.hx">
		<pie_ public="1" expr="pie">
			<f a="pen:ax:ay:rx:ry:beta:gamma:prefer:?color:?sides">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pie</e></m></meta>
		</pie_>
		<arc_ public="1" expr="arc">
			<f a="pen:ax:ay:rx:ry:width:height:beta:gamma:prefer:?color:?sides">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>arc</e></m></meta>
		</arc_>
		<new public="1" set="method" line="89">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="cornerContour.shape._Pies.Pies_Fields_" params="" file="src/cornerContour/shape/Pies.hx" private="1" module="cornerContour.shape.Pies" final="1">
		<pie public="1" get="inline" set="null" line="16" static="1">
			<f a="pen:ax:ay:rx:ry:beta:gamma:prefer:?color:?sides" v=":::::::::36">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
 * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<arc public="1" get="inline" set="null" line="52" static="1">
			<f a="pen:ax:ay:rx:ry:width:height:beta:gamma:prefer:?color:?sides" v=":::::::::::36">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</arc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContour.shape.Quads" params="" file="src/cornerContour/shape/Quads.hx">
		<add2DQuad_ public="1" expr="add2DQuad">
			<f a="pen:ax:ay:bx:by:cx:cy:dx:dy:?color">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>add2DQuad</e></m></meta>
		</add2DQuad_>
		<quadDraw_ public="1" expr="quadDraw">
			<f a="pen:q:?color">
				<c path="cornerContour.IPen"/>
				<x path="cornerContour.shape.structs.Quad2D"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>quadDraw</e></m></meta>
		</quadDraw_>
		<rectangle_ public="1" expr="rectangle">
			<f a="pen:x:y:w:h:?color">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>rectangle</e></m></meta>
		</rectangle_>
		<squareOutline_ public="1" expr="squareOutline">
			<f a="pen:px:py:radius:thick:?color:?theta">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>squareOutline</e></m></meta>
		</squareOutline_>
		<square_ public="1" expr="square">
			<f a="pen:px:py:radius:?color:?theta">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>square</e></m></meta>
		</square_>
		<diamond_ public="1" expr="diamond">
			<f a="pen:x:y:radius:?color:?theta">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamond</e></m></meta>
		</diamond_>
		<diamondOutline_ public="1" expr="diamondOutline">
			<f a="pen:x:y:thick:radius:?color:?theta">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamondOutline</e></m></meta>
		</diamondOutline_>
		<roundedRectangle_ public="1" expr="roundedRectangle">
			<f a="pen:x:y:rx:ry:width:height:?color">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>roundedRectangle</e></m></meta>
		</roundedRectangle_>
		<new public="1" set="method" line="306">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="cornerContour.shape._Quads.Quads_Fields_" params="" file="src/cornerContour/shape/Quads.hx" private="1" module="cornerContour.shape.Quads" final="1">
		<add2DQuad public="1" get="inline" set="null" line="13" static="1"><f a="pen:ax:ay:bx:by:cx:cy:dx:dy:?color">
	<c path="cornerContour.IPen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></add2DQuad>
		<quadDraw public="1" get="inline" set="null" line="19" static="1"><f a="pen:q:?color">
	<c path="cornerContour.IPen"/>
	<x path="cornerContour.shape.structs.Quad2D"/>
	<x path="Int"/>
	<x path="Int"/>
</f></quadDraw>
		<rectangle public="1" get="inline" set="null" line="31" static="1"><f a="pen:x:y:w:h:?color">
	<c path="cornerContour.IPen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rectangle>
		<rectangleOutline public="1" get="inline" set="null" line="43" static="1"><f a="pen:x:y:w:h:thickX:thickY:?color">
	<c path="cornerContour.IPen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rectangleOutline>
		<squareOutline public="1" get="inline" set="null" line="77" static="1">
			<f a="pen:px:py:radius:thick:?color:?theta" v="::::::0">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</squareOutline>
		<square public="1" get="inline" set="null" line="179" static="1">
			<f a="pen:px:py:radius:?color:?theta" v=":::::0">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</square>
		<diamond public="1" get="inline" set="null" line="228" static="1">
			<f a="pen:x:y:radius:?color:?theta" v=":::::0.">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamond>
		<diamondOutline public="1" get="inline" set="null" line="237" static="1">
			<f a="pen:x:y:thick:radius:?color:?theta" v="::::::0.">
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamondOutline>
		<roundedRectangle public="1" get="inline" set="null" line="246" static="1"><f a="pen:x:y:rx:ry:width:height:?color">
	<c path="cornerContour.IPen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></roundedRectangle>
		<roundedRectangleOutline public="1" get="inline" set="null" line="279" static="1"><f a="pen:x:y:rx:ry:width:height:thick:?color">
	<c path="cornerContour.IPen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></roundedRectangleOutline>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cornerContour.shape.ShapeSvgName" params="" file="src/cornerContour/shape/ShapeXML.hx" module="cornerContour.shape.ShapeXML">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="cornerContour.shape._ShapeXML.ShapeSvgName_Impl_" params="" file="src/cornerContour/shape/ShapeXML.hx" private="1" module="cornerContour.shape.ShapeXML" extern="1" final="1">
	<svgRect public="1" get="inline" set="null" expr="cast &quot;rect&quot;" line="16" static="1">
		<x path="cornerContour.shape.ShapeSvgName"/>
		<meta>
			<m n=":value"><e>cast "rect"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</svgRect>
	<svgCircle public="1" get="inline" set="null" expr="cast &quot;circle&quot;" line="17" static="1">
		<x path="cornerContour.shape.ShapeSvgName"/>
		<meta>
			<m n=":value"><e>cast "circle"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</svgCircle>
	<svgEllipse public="1" get="inline" set="null" expr="cast &quot;ellipse&quot;" line="18" static="1">
		<x path="cornerContour.shape.ShapeSvgName"/>
		<meta>
			<m n=":value"><e>cast "ellipse"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</svgEllipse>
	<svgLine public="1" get="inline" set="null" expr="cast &quot;line&quot;" line="19" static="1">
		<x path="cornerContour.shape.ShapeSvgName"/>
		<meta>
			<m n=":value"><e>cast "line"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</svgLine>
	<svgPolyline public="1" get="inline" set="null" expr="cast &quot;polyline&quot;" line="20" static="1">
		<x path="cornerContour.shape.ShapeSvgName"/>
		<meta>
			<m n=":value"><e>cast "polyline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</svgPolyline>
	<svgPolygon public="1" get="inline" set="null" expr="cast &quot;polygon&quot;" line="21" static="1">
		<x path="cornerContour.shape.ShapeSvgName"/>
		<meta>
			<m n=":value"><e>cast "polygon"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</svgPolygon>
	<svgNone public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="22" static="1">
		<x path="cornerContour.shape.ShapeSvgName"/>
		<meta>
			<m n=":value"><e>cast "none"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</svgNone>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour.shape._ShapeXML.ShapeSvgName_Impl_" params="" file="src/cornerContour/shape/ShapeXML.hx" private="1" module="cornerContour.shape.ShapeXML" extern="1" final="1">
		<svgRect public="1" get="inline" set="null" expr="cast &quot;rect&quot;" line="16" static="1">
			<x path="cornerContour.shape.ShapeSvgName"/>
			<meta>
				<m n=":value"><e>cast "rect"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</svgRect>
		<svgCircle public="1" get="inline" set="null" expr="cast &quot;circle&quot;" line="17" static="1">
			<x path="cornerContour.shape.ShapeSvgName"/>
			<meta>
				<m n=":value"><e>cast "circle"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</svgCircle>
		<svgEllipse public="1" get="inline" set="null" expr="cast &quot;ellipse&quot;" line="18" static="1">
			<x path="cornerContour.shape.ShapeSvgName"/>
			<meta>
				<m n=":value"><e>cast "ellipse"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</svgEllipse>
		<svgLine public="1" get="inline" set="null" expr="cast &quot;line&quot;" line="19" static="1">
			<x path="cornerContour.shape.ShapeSvgName"/>
			<meta>
				<m n=":value"><e>cast "line"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</svgLine>
		<svgPolyline public="1" get="inline" set="null" expr="cast &quot;polyline&quot;" line="20" static="1">
			<x path="cornerContour.shape.ShapeSvgName"/>
			<meta>
				<m n=":value"><e>cast "polyline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</svgPolyline>
		<svgPolygon public="1" get="inline" set="null" expr="cast &quot;polygon&quot;" line="21" static="1">
			<x path="cornerContour.shape.ShapeSvgName"/>
			<meta>
				<m n=":value"><e>cast "polygon"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</svgPolygon>
		<svgNone public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="22" static="1">
			<x path="cornerContour.shape.ShapeSvgName"/>
			<meta>
				<m n=":value"><e>cast "none"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</svgNone>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="cornerContour.shape.ShapeXML" params="" file="src/cornerContour/shape/ShapeXML.hx">
		<from><icast field="fromString"><c path="String"/></icast></from>
		<this><x path="haxe.xml.Access"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="cornerContour.shape._ShapeXML.ShapeXML_Impl_" params="" file="src/cornerContour/shape/ShapeXML.hx" private="1" module="cornerContour.shape.ShapeXML" final="1">
	<_new get="inline" set="null" line="35" static="1">
		<f a="xml">
			<x path="haxe.xml.Access"/>
			<x path="cornerContour.shape.ShapeXML"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" set="method" line="39" static="1">
		<f a="s">
			<c path="String"/>
			<x path="cornerContour.shape.ShapeXML"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<shapeName public="1" get="inline" set="null" line="44" static="1"><f a="this">
	<x path="haxe.xml.Access"/>
	<c path="String"/>
</f></shapeName>
	<draw public="1" get="inline" set="null" line="72" static="1">
		<f a="this:pen:?dx:?dy:?sx:?sy:?scaleThick" v="::0.:0.:1.:1.:1.">
			<x path="haxe.xml.Access"/>
			<c path="cornerContour.IPen"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ scaleThick : 1., sy : 1., sx : 1., dy : 0., dx : 0. }</e></m></meta>
	</draw>
	<polyline public="1" get="inline" set="null" line="167" static="1">
		<f a="this:pen:points:?width:?color:?dx:?dy:?sx:?sy" v=":::1.::0.:0.:1.:1.">
			<x path="haxe.xml.Access"/>
			<c path="cornerContour.IPen"/>
			<c path="String"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ sy : 1., sx : 1., dy : 0., dx : 0., width : 1. }</e></m></meta>
	</polyline>
	<polylineJoin public="1" get="inline" set="null" line="186" static="1">
		<f a="this:pen:points:?width:?color:?dx:?dy:?sx:?sy" v=":::1.::0.:0.:1.:1.">
			<x path="haxe.xml.Access"/>
			<c path="cornerContour.IPen"/>
			<c path="String"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ sy : 1., sx : 1., dy : 0., dx : 0., width : 1. }</e></m></meta>
	</polylineJoin>
	<polygon public="1" get="inline" set="null" line="209" static="1">
		<f a="this:pen:points:?color:?dx:?dy:?sx:?sy" v="::::0.:0.:1.:1.">
			<x path="haxe.xml.Access"/>
			<c path="cornerContour.IPen"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ sy : 1., sx : 1., dy : 0., dx : 0. }</e></m></meta>
	</polygon>
</class></impl>
	</abstract>
	<class path="cornerContour.shape._ShapeXML.ShapeXML_Impl_" params="" file="src/cornerContour/shape/ShapeXML.hx" private="1" module="cornerContour.shape.ShapeXML" final="1">
		<_new get="inline" set="null" line="35" static="1">
			<f a="xml">
				<x path="haxe.xml.Access"/>
				<x path="cornerContour.shape.ShapeXML"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" set="method" line="39" static="1">
			<f a="s">
				<c path="String"/>
				<x path="cornerContour.shape.ShapeXML"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<shapeName public="1" get="inline" set="null" line="44" static="1"><f a="this">
	<x path="haxe.xml.Access"/>
	<c path="String"/>
</f></shapeName>
		<draw public="1" get="inline" set="null" line="72" static="1">
			<f a="this:pen:?dx:?dy:?sx:?sy:?scaleThick" v="::0.:0.:1.:1.:1.">
				<x path="haxe.xml.Access"/>
				<c path="cornerContour.IPen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ scaleThick : 1., sy : 1., sx : 1., dy : 0., dx : 0. }</e></m></meta>
		</draw>
		<polyline public="1" get="inline" set="null" line="167" static="1">
			<f a="this:pen:points:?width:?color:?dx:?dy:?sx:?sy" v=":::1.::0.:0.:1.:1.">
				<x path="haxe.xml.Access"/>
				<c path="cornerContour.IPen"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sy : 1., sx : 1., dy : 0., dx : 0., width : 1. }</e></m></meta>
		</polyline>
		<polylineJoin public="1" get="inline" set="null" line="186" static="1">
			<f a="this:pen:points:?width:?color:?dx:?dy:?sx:?sy" v=":::1.::0.:0.:1.:1.">
				<x path="haxe.xml.Access"/>
				<c path="cornerContour.IPen"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sy : 1., sx : 1., dy : 0., dx : 0., width : 1. }</e></m></meta>
		</polylineJoin>
		<polygon public="1" get="inline" set="null" line="209" static="1">
			<f a="this:pen:points:?color:?dx:?dy:?sx:?sy" v="::::0.:0.:1.:1.">
				<x path="haxe.xml.Access"/>
				<c path="cornerContour.IPen"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sy : 1., sx : 1., dy : 0., dx : 0. }</e></m></meta>
		</polygon>
	</class>
	<class path="cornerContour.shape._ShapeXML.ShapeXML_Fields_" params="" file="src/cornerContour/shape/ShapeXML.hx" private="1" module="cornerContour.shape.ShapeXML" final="1">
		<parseFloat public="1" get="inline" set="null" line="9" static="1"><f a="s">
	<c path="String"/>
	<x path="Float"/>
</f></parseFloat>
		<parseInt public="1" get="inline" set="null" line="12" static="1"><f a="s">
	<c path="String"/>
	<x path="Null"><x path="Int"/></x>
</f></parseInt>
	</class>
	<class path="cornerContour.shape.structs.Quad2D_" params="" file="src/cornerContour/shape/structs/Quad2D.hx" module="cornerContour.shape.structs.Quad2D">
		<a public="1"><c path="cornerContour.shape.structs.XY"/></a>
		<b public="1"><c path="cornerContour.shape.structs.XY"/></b>
		<c public="1"><c path="cornerContour.shape.structs.XY"/></c>
		<d public="1"><c path="cornerContour.shape.structs.XY"/></d>
		<clone public="1" set="method" line="15"><f a=""><c path="cornerContour.shape.structs.Quad2D_"/></f></clone>
		<new set="method" line="9"><f a="a:b:c:d">
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="cornerContour.shape.structs.Quad2D" params="" file="src/cornerContour/shape/structs/Quad2D.hx">
		<from><icast><c path="cornerContour.shape.structs.Quad2D_"/></icast></from>
		<this><c path="cornerContour.shape.structs.Quad2D_"/></this>
		<to><icast><c path="cornerContour.shape.structs.Quad2D_"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="cornerContour.shape.structs._Quad2D.Quad2D_Impl_" params="" file="src/cornerContour/shape/structs/Quad2D.hx" private="1" module="cornerContour.shape.structs.Quad2D" final="1">
	<_new public="1" get="inline" set="null" line="21" static="1">
		<f a="quad">
			<c path="cornerContour.shape.structs.Quad2D_"/>
			<x path="cornerContour.shape.structs.Quad2D"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="25" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="38" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="48" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<scaleXcentre public="1" get="inline" set="null" line="72" static="1"><f a="this:sx:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleXcentre>
	<scaleYcentre public="1" get="inline" set="null" line="82" static="1"><f a="this:sy:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleYcentre>
	<scaleX_leftAlign public="1" get="inline" set="null" line="92" static="1"><f a="this:sx:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleX_leftAlign>
	<scaleX_rightAlign public="1" get="inline" set="null" line="104" static="1"><f a="this:sx:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleX_rightAlign>
	<scaleY_topAlign public="1" get="inline" set="null" line="116" static="1"><f a="this:sy:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleY_topAlign>
	<scaleY_bottomAlign public="1" get="inline" set="null" line="128" static="1"><f a="this:sy:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleY_bottomAlign>
	<scaleXY_alignTopLeft public="1" get="inline" set="null" line="140" static="1"><f a="this:sx:sy">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignTopLeft>
	<scaleXY_alignTopRight public="1" get="inline" set="null" line="147" static="1"><f a="this:sx:sy">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignTopRight>
	<scaleXY_alignBottomRight public="1" get="inline" set="null" line="154" static="1"><f a="this:sx:sy">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignBottomRight>
	<scaleXY_alignBottomLeft public="1" get="inline" set="null" line="161" static="1"><f a="this:sx:sy">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignBottomLeft>
	<width public="1" get="accessor" set="accessor" static="1"><x path="Float"/></width>
	<get_width get="inline" set="null" line="168" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
</f></get_width>
	<set_width get="inline" set="null" line="171" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
	<height public="1" get="accessor" set="accessor" static="1"><x path="Float"/></height>
	<get_height get="inline" set="null" line="179" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
</f></get_height>
	<set_height get="inline" set="null" line="182" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
	<scale public="1" get="null" set="accessor" static="1"><x path="Float"/></scale>
	<set_scale get="inline" set="null" line="190" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_scale>
	<scaleCentre public="1" get="inline" set="null" line="196" static="1"><f a="this:s">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleCentre>
	<scaleDimension get="inline" set="null" line="202" static="1"><f a="this:dim:s:centre">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scaleDimension>
	<bounds public="1" get="inline" set="null" line="207" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
</f></bounds>
	<rotateTrig public="1" get="inline" set="null" line="252" static="1"><f a="this:x:y:cos:sin">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Quad2D"/>
</f></rotateTrig>
</class></impl>
	</abstract>
	<class path="cornerContour.shape.structs._Quad2D.Quad2D_Impl_" params="" file="src/cornerContour/shape/structs/Quad2D.hx" private="1" module="cornerContour.shape.structs.Quad2D" final="1">
		<_new public="1" get="inline" set="null" line="21" static="1">
			<f a="quad">
				<c path="cornerContour.shape.structs.Quad2D_"/>
				<x path="cornerContour.shape.structs.Quad2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="25" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="38" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="48" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<scaleXcentre public="1" get="inline" set="null" line="72" static="1"><f a="this:sx:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleXcentre>
		<scaleYcentre public="1" get="inline" set="null" line="82" static="1"><f a="this:sy:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleYcentre>
		<scaleX_leftAlign public="1" get="inline" set="null" line="92" static="1"><f a="this:sx:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleX_leftAlign>
		<scaleX_rightAlign public="1" get="inline" set="null" line="104" static="1"><f a="this:sx:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleX_rightAlign>
		<scaleY_topAlign public="1" get="inline" set="null" line="116" static="1"><f a="this:sy:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleY_topAlign>
		<scaleY_bottomAlign public="1" get="inline" set="null" line="128" static="1"><f a="this:sy:?rect">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
	<x path="Void"/>
</f></scaleY_bottomAlign>
		<scaleXY_alignTopLeft public="1" get="inline" set="null" line="140" static="1"><f a="this:sx:sy">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignTopLeft>
		<scaleXY_alignTopRight public="1" get="inline" set="null" line="147" static="1"><f a="this:sx:sy">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignTopRight>
		<scaleXY_alignBottomRight public="1" get="inline" set="null" line="154" static="1"><f a="this:sx:sy">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignBottomRight>
		<scaleXY_alignBottomLeft public="1" get="inline" set="null" line="161" static="1"><f a="this:sx:sy">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignBottomLeft>
		<width public="1" get="accessor" set="accessor" static="1"><x path="Float"/></width>
		<get_width get="inline" set="null" line="168" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
</f></get_width>
		<set_width get="inline" set="null" line="171" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<height public="1" get="accessor" set="accessor" static="1"><x path="Float"/></height>
		<get_height get="inline" set="null" line="179" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
</f></get_height>
		<set_height get="inline" set="null" line="182" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<scale public="1" get="null" set="accessor" static="1"><x path="Float"/></scale>
		<set_scale get="inline" set="null" line="190" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_scale>
		<scaleCentre public="1" get="inline" set="null" line="196" static="1"><f a="this:s">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleCentre>
		<scaleDimension get="inline" set="null" line="202" static="1"><f a="this:dim:s:centre">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scaleDimension>
		<bounds public="1" get="inline" set="null" line="207" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
</f></bounds>
		<rotateTrig public="1" get="inline" set="null" line="252" static="1"><f a="this:x:y:cos:sin">
	<c path="cornerContour.shape.structs.Quad2D_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Quad2D"/>
</f></rotateTrig>
	</class>
	<class path="cornerContour.shape.structs.Rectangle_" params="" file="src/cornerContour/shape/structs/Rectangle.hx" module="cornerContour.shape.structs.Rectangle">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<clone public="1" set="method" line="15"><f a=""><c path="cornerContour.shape.structs.Rectangle_"/></f></clone>
		<new set="method" line="9"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="cornerContour.shape.structs.Rectangle" params="" file="src/cornerContour/shape/structs/Rectangle.hx">
		<from><icast><c path="cornerContour.shape.structs.Rectangle_"/></icast></from>
		<this><c path="cornerContour.shape.structs.Rectangle_"/></this>
		<to>
			<icast><c path="cornerContour.shape.structs.Rectangle_"/></icast>
			<icast field="toQuad2D"><x path="cornerContour.shape.structs.Quad2D"/></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="cornerContour.shape.structs._Rectangle.Rectangle_Impl_" params="" file="src/cornerContour/shape/structs/Rectangle.hx" private="1" module="cornerContour.shape.structs.Rectangle" final="1">
	<_new public="1" get="inline" set="null" line="21" static="1">
		<f a="rectangle">
			<c path="cornerContour.shape.structs.Rectangle_"/>
			<x path="cornerContour.shape.structs.Rectangle"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<right public="1" get="accessor" set="accessor" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="26" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
</f></get_right>
	<set_right get="inline" set="null" line="30" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_right>
	<bottom public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="36" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
</f></get_bottom>
	<set_bottom get="inline" set="null" line="40" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bottom>
	<bottomRight public="1" get="accessor" set="accessor" static="1"><c path="cornerContour.shape.structs.XY"/></bottomRight>
	<get_bottomRight get="inline" set="null" line="46" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
</f></get_bottomRight>
	<set_bottomRight get="inline" set="null" line="50" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
</f></set_bottomRight>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx get="inline" set="null" line="57" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy get="inline" set="null" line="67" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy get="inline" set="null" line="71" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<centre public="1" get="accessor" set="accessor" static="1"><c path="cornerContour.shape.structs.XY"/></centre>
	<get_centre get="inline" set="null" line="77" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
</f></get_centre>
	<set_centre get="inline" set="null" line="81" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
</f></set_centre>
	<rotatedQuad public="1" get="inline" set="null" line="89" static="1"><f a="this:x:y:theta">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Quad2D"/>
</f></rotatedQuad>
	<rotatedBounds public="1" get="inline" set="null" line="96" static="1"><f a="this:x:y:theta">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
</f></rotatedBounds>
	<toQuad2D public="1" get="inline" set="null" line="101" static="1">
		<f a="this">
			<c path="cornerContour.shape.structs.Rectangle_"/>
			<x path="cornerContour.shape.structs.Quad2D"/>
		</f>
		<meta><m n=":to"/></meta>
	</toQuad2D>
	<hit public="1" get="inline" set="null" line="108" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
	<x path="Bool"/>
</f></hit>
</class></impl>
	</abstract>
	<class path="cornerContour.shape.structs._Rectangle.Rectangle_Impl_" params="" file="src/cornerContour/shape/structs/Rectangle.hx" private="1" module="cornerContour.shape.structs.Rectangle" final="1">
		<_new public="1" get="inline" set="null" line="21" static="1">
			<f a="rectangle">
				<c path="cornerContour.shape.structs.Rectangle_"/>
				<x path="cornerContour.shape.structs.Rectangle"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<right public="1" get="accessor" set="accessor" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="26" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
</f></get_right>
		<set_right get="inline" set="null" line="30" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_right>
		<bottom public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="36" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
</f></get_bottom>
		<set_bottom get="inline" set="null" line="40" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bottom>
		<bottomRight public="1" get="accessor" set="accessor" static="1"><c path="cornerContour.shape.structs.XY"/></bottomRight>
		<get_bottomRight get="inline" set="null" line="46" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
</f></get_bottomRight>
		<set_bottomRight get="inline" set="null" line="50" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
</f></set_bottomRight>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx get="inline" set="null" line="57" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy get="inline" set="null" line="67" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy get="inline" set="null" line="71" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<centre public="1" get="accessor" set="accessor" static="1"><c path="cornerContour.shape.structs.XY"/></centre>
		<get_centre get="inline" set="null" line="77" static="1"><f a="this">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
</f></get_centre>
		<set_centre get="inline" set="null" line="81" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
	<c path="cornerContour.shape.structs.XY"/>
</f></set_centre>
		<rotatedQuad public="1" get="inline" set="null" line="89" static="1"><f a="this:x:y:theta">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Quad2D"/>
</f></rotatedQuad>
		<rotatedBounds public="1" get="inline" set="null" line="96" static="1"><f a="this:x:y:theta">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="cornerContour.shape.structs.Rectangle"/>
</f></rotatedBounds>
		<toQuad2D public="1" get="inline" set="null" line="101" static="1">
			<f a="this">
				<c path="cornerContour.shape.structs.Rectangle_"/>
				<x path="cornerContour.shape.structs.Quad2D"/>
			</f>
			<meta><m n=":to"/></meta>
		</toQuad2D>
		<hit public="1" get="inline" set="null" line="108" static="1"><f a="this:v">
	<c path="cornerContour.shape.structs.Rectangle_"/>
	<c path="cornerContour.shape.structs.XY"/>
	<x path="Bool"/>
</f></hit>
	</class>
	<class path="cornerContour.shape.structs.XY" params="" file="src/cornerContour/shape/structs/XY.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<clone public="1" set="method" line="15"><f a=""><c path="cornerContour.shape.structs.XY"/></f></clone>
		<new public="1" set="method" line="11"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="cpp.ArrayBase" params="" file="/usr/local/lib/haxe/std/cpp/ArrayBase.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getElementSize public="1" set="method"><f a=""><x path="Int"/></f></getElementSize>
		<getByteCount public="1" set="method"><f a=""><x path="Int"/></f></getByteCount>
		<getBase public="1" set="method"><f a=""><c path="cpp.RawPointer"><x path="cpp.Char"/></c></f></getBase>
	</class>
	<class path="cpp.AutoCast" params="" file="/usr/local/lib/haxe/std/cpp/AutoCast.hx" extern="1"/>
	<abstract path="cpp.Char" params="" file="/usr/local/lib/haxe/std/cpp/Char.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.Char"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.ConstPointer" params="T" file="/usr/local/lib/haxe/std/cpp/ConstPointer.hx" extern="1">
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawConstPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.ConstPointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.ConstPointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.ConstPointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<ptr public="1"><t path="cpp.Star"><c path="cpp.ConstPointer.T"/></t></ptr>
		<value public="1" get="accessor" set="null"><c path="cpp.ConstPointer.T"/></value>
		<raw public="1" get="accessor" set="null"><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></raw>
		<constRaw public="1" get="accessor" set="null"><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></constRaw>
		<get_value public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></get_value>
		<get_constRaw public="1" set="method"><f a=""><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></f></get_constRaw>
		<get_raw public="1" set="method"><f a=""><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></f></get_raw>
		<lt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></lt>
		<leq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></leq>
		<gt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></gt>
		<geq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></geq>
		<setRaw public="1" params="O" set="method"><f a="ptr">
	<c path="cpp.RawPointer"><c path="setRaw.O"/></c>
	<x path="Void"/>
</f></setRaw>
		<reinterpret public="1" params="Other" set="method"><f a=""><c path="cpp.Pointer"><c path="reinterpret.Other"/></c></f></reinterpret>
		<rawCast public="1" params="Other" set="method"><f a=""><c path="cpp.RawPointer"><c path="rawCast.Other"/></c></f></rawCast>
		<at public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t>
</f></at>
		<inc public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></inc>
		<dec public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></dec>
		<incBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></decBy>
		<add public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></add>
		<sub public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></sub>
		<postIncVal public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></postIncVal>
		<meta>
			<m n=":coreType"/>
			<m n=":include"><e>"cpp/Pointer.h"</e></m>
			<m n=":native"><e>"cpp.Pointer"</e></m>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.EnumBase" params="" file="/usr/local/lib/haxe/std/cpp/EnumBase.hx" extern="1">
		<_hx_getIndex public="1" set="method"><f a=""><x path="Int"/></f></_hx_getIndex>
		<_hx_getTag public="1" set="method"><f a=""><c path="String"/></f></_hx_getTag>
		<_hx_getParamCount public="1" set="method"><f a=""><x path="Int"/></f></_hx_getParamCount>
		<_hx_getParamI public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></_hx_getParamI>
		<_hx_getParameters public="1" set="method"><f a=""><c path="Array"><d/></c></f></_hx_getParameters>
		<getIndex public="1" get="inline" set="null" line="35"><f a=""><x path="Int"/></f></getIndex>
		<getTag public="1" get="inline" set="null" line="37"><f a=""><c path="String"/></f></getTag>
		<getParamCount public="1" get="inline" set="null" line="39"><f a=""><x path="Int"/></f></getParamCount>
		<getParamI public="1" get="inline" set="null" line="41"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></getParamI>
		<getParameters public="1" get="inline" set="null" line="43"><f a=""><c path="Array"><d/></c></f></getParameters>
		<meta><m n=":native"><e>"hx.EnumBase"</e></m></meta>
	</class>
	<class path="cpp.ErrorConstants" params="" file="/usr/local/lib/haxe/std/cpp/ErrorConstants.hx" extern="1">
		<invalidCast public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_CAST"</e></m></meta>
		</invalidCast>
		<indexOutOfBounds public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INDEX_OUT_OF_BOUNDS"</e></m></meta>
		</indexOutOfBounds>
		<invalidObject public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_OBJECT"</e></m></meta>
		</invalidObject>
		<invalidArgCount public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_ARG_COUNT"</e></m></meta>
		</invalidArgCount>
		<nullFunctionPointer public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_NULL_FUNCTION_POINTER"</e></m></meta>
		</nullFunctionPointer>
	</class>
	<class path="cpp.NativeArray" params="" file="/usr/local/lib/haxe/std/cpp/NativeArray.hx" extern="1">
		<create public="1" params="T" set="method" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="Array"><c path="create.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_create_array_length"</e></m></meta>
		</create>
		<blit public="1" params="T" get="inline" set="null" line="37" static="1">
			<f a="ioDestArray:inDestElement:inSourceArray:inSourceElement:inElementCount">
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</blit>
		<getBase public="1" get="inline" set="null" line="41" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<c path="cpp.ArrayBase"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getBase>
		<reserve public="1" params="T" set="method" static="1">
			<f a="inArray:inElements">
				<c path="Array"><c path="reserve.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</reserve>
		<capacity public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="capacity.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</capacity>
		<getElementSize public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="getElementSize.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</getElementSize>
		<address public="1" params="T" get="inline" set="null" line="54" static="1"><f a="inArray:inIndex">
	<c path="Array"><c path="address.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="address.T"/></c>
</f></address>
		<setData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setData.T"/></c>
				<c path="cpp.Pointer"><c path="setData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setData>
		<setUnmanagedData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setUnmanagedData.T"/></c>
				<c path="cpp.ConstPointer"><c path="setUnmanagedData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setUnmanagedData>
		<zero public="1" params="T" set="method" static="1">
			<f a="ioDestArray:?inFirst:?inElements">
				<c path="Array"><c path="zero.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</zero>
		<removeAt public="1" params="T" set="method" static="1">
			<f a="ioDestArray:inIndex">
				<c path="Array"><c path="removeAt.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</removeAt>
		<memcmp public="1" params="T" set="method" static="1">
			<f a="inArrayA:inArrayB">
				<c path="Array"><c path="memcmp.T"/></c>
				<c path="Array"><c path="memcmp.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</memcmp>
		<resolveVirtualArray public="1" set="method" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_reslove_virtual_array"</e></m></meta>
		</resolveVirtualArray>
		<unsafeGet public="1" params="T" set="method" static="1">
			<f a="inDestArray:inIndex">
				<c path="Array"><c path="unsafeGet.T"/></c>
				<x path="Int"/>
				<c path="unsafeGet.T"/>
			</f>
			<meta><m n=":native"><e>"_hx_array_unsafe_get"</e></m></meta>
		</unsafeGet>
		<unsafeSet public="1" params="T" get="inline" set="null" line="93" static="1">
			<f a="ioDestArray:inIndex:inValue">
				<c path="Array"><c path="unsafeSet.T"/></c>
				<x path="Int"/>
				<c path="unsafeSet.T"/>
				<c path="unsafeSet.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":native"><e>"_hx_array_unsafe_set"</e></m>
			</meta>
		</unsafeSet>
		<setSize public="1" params="T" set="method" static="1">
			<f a="ioArray:inSize">
				<c path="Array"><c path="setSize.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="setSize.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_array_set_size_exact"</e></m></meta>
		</setSize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cpp.NativeString" params="" file="/usr/local/lib/haxe/std/cpp/NativeString.hx" extern="1">
		<raw public="1" get="inline" set="null" line="26" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</raw>
		<c_str public="1" get="inline" set="null" line="29" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</c_str>
		<fromPointer public="1" get="inline" set="null" line="32" static="1">
			<f a="inPtr">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromPointer>
		<fromGcPointer public="1" get="inline" set="null" line="35" static="1">
			<f a="inPtr:inLen">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromGcPointer>
		<parseFloat public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_float"</e></m></meta>
		</parseFloat>
		<parseSubstrFloat public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_float"</e></m></meta>
		</parseSubstrFloat>
		<parseInt public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseInt>
		<parseSubstrInt public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseSubstrInt>
		<compare public="1" set="method" static="1">
			<f a="inString0:inString1">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_compare"</e></m></meta>
		</compare>
		<utf8CharCodeAt public="1" set="method" static="1">
			<f a="inString:inIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_char_code_at"</e></m></meta>
		</utf8CharCodeAt>
		<utf8Length public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_length"</e></m></meta>
		</utf8Length>
		<utf8IsValid public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_is_valid"</e></m></meta>
		</utf8IsValid>
		<utf8Sub public="1" set="method" static="1">
			<f a="inString:charStart:inLen">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_sub"</e></m></meta>
		</utf8Sub>
		<fromPointerLen public="1" set="method" static="1">
			<f a="inPtr:len">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_create"</e></m></meta>
		</fromPointerLen>
		<utf8DecodeAdvance public="1" set="method" static="1">
			<f a="reference">
				<x path="cpp.Char"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_decode_advance"</e></m></meta>
		</utf8DecodeAdvance>
	</class>
	<class path="cpp.ObjectType" params="" file="/usr/local/lib/haxe/std/cpp/ObjectType.hx" extern="1">
		<vtUnknown public="1" get="inline" set="null" expr="-1" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</vtUnknown>
		<vtInt public="1" get="inline" set="null" expr="0xff" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xff</e></m></meta>
		</vtInt>
		<vtNull public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</vtNull>
		<vtFloat public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</vtFloat>
		<vtBool public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</vtBool>
		<vtString public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</vtString>
		<vtObject public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</vtObject>
		<vtArray public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</vtArray>
		<vtFunction public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</vtFunction>
		<vtEnum public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</vtEnum>
		<vtClass public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</vtClass>
		<vtInt64 public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</vtInt64>
		<vtAbstractBase public="1" get="inline" set="null" expr="0x100" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100</e></m></meta>
		</vtAbstractBase>
	</class>
	<class path="cpp.Pointer" params="T" file="/usr/local/lib/haxe/std/cpp/Pointer.hx" extern="1">
		<extends path="cpp.ConstPointer"><c path="cpp.Pointer.T"/></extends>
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.Pointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.Pointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<nativeFromHandle public="1" params="T" set="method" static="1">
			<f a="inHandle:?inKind">
				<d/>
				<c path="String"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromHandle"</e></m></meta>
		</nativeFromHandle>
		<fromHandle public="1" params="T" get="inline" set="null" line="44" static="1"><f a="inHandle:?inKind">
	<d/>
	<c path="String"/>
	<c path="cpp.Pointer"><c path="fromHandle.T"/></c>
</f></fromHandle>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.Pointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<addressOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<t path="cpp.Reference"><c path="addressOf.T"/></t>
	<c path="cpp.Pointer"><c path="addressOf.T"/></c>
</f></addressOf>
		<endOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<c path="endOf.T"/>
	<c path="cpp.Pointer"><c path="cpp.Void"/></c>
</f></endOf>
		<nativeArrayElem public="1" params="T" set="method" static="1">
			<f a="array:inElem">
				<c path="Array"><c path="nativeArrayElem.T"/></c>
				<x path="Int"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::arrayElem"</e></m></meta>
		</nativeArrayElem>
		<arrayElem public="1" params="T" get="inline" set="null" line="56" static="1"><f a="array:inElem">
	<c path="Array"><c path="arrayElem.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="arrayElem.T"/></c>
</f></arrayElem>
		<nativeOfArray public="1" params="T" set="method" static="1">
			<f a="array">
				<c path="Array"><c path="nativeOfArray.T"/></c>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::ofArray"</e></m></meta>
		</nativeOfArray>
		<ofArray public="1" params="T" get="inline" set="null" line="62" static="1"><f a="array">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="cpp.Pointer"><c path="ofArray.T"/></c>
</f></ofArray>
		<ref public="1" get="accessor" set="accessor"><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></ref>
		<get_ref public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></get_ref>
		<set_ref public="1" set="method"><f a="t">
	<c path="cpp.Pointer.T"/>
	<t path="cpp.Reference"><c path="cpp.Pointer.T"/></t>
</f></set_ref>
		<setAt public="1" set="method"><f a="inIndex:value">
	<x path="Int"/>
	<c path="cpp.Pointer.T"/>
	<x path="Void"/>
</f></setAt>
		<toUnmanagedArray public="1" get="inline" set="null" line="66"><f a="elementCount">
	<x path="Int"/>
	<c path="Array"><c path="cpp.Pointer.T"/></c>
</f></toUnmanagedArray>
		<toUnmanagedVector public="1" get="inline" set="null" line="73"><f a="elementCount">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><c path="cpp.Pointer.T"/></x>
</f></toUnmanagedVector>
		<inc public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></inc>
		<dec public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></dec>
		<incBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></decBy>
		<add public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></add>
		<sub public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></sub>
		<postIncRef public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></postIncRef>
		<destroy public="1" set="method"><f a=""><x path="Void"/></f></destroy>
		<destroyArray public="1" set="method"><f a=""><x path="Void"/></f></destroyArray>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreType"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.RawConstPointer" params="T" file="/usr/local/lib/haxe/std/cpp/RawConstPointer.hx" extern="1">
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawConstPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<class path="cpp.RawPointer" params="T" file="/usr/local/lib/haxe/std/cpp/RawPointer.hx" extern="1">
		<extends path="cpp.RawConstPointer"><c path="cpp.RawPointer.T"/></extends>
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<typedef path="cpp.Reference" params="T" file="/usr/local/lib/haxe/std/cpp/Reference.hx">
		<c path="cpp.Reference.T"/>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this and
	prevent unwanted casting.</haxe_doc>
		<meta><m n=":semantics"><e>reference</e></m></meta>
	</typedef>
	<typedef path="cpp.Star" params="T" file="/usr/local/lib/haxe/std/cpp/Star.hx">
		<x path="Null"><c path="cpp.Star.T"/></x>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this use the
	correct type.</haxe_doc>
	</typedef>
	<abstract path="cpp.UInt8" params="" file="/usr/local/lib/haxe/std/cpp/UInt8.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.UInt8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.Void" params="" file="/usr/local/lib/haxe/std/cpp/Void.hx" extern="1"><meta><m n=":native"><e>"void"</e></m></meta></class>
	<enum path="fracs.DifferencePreference" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Angles.hx" module="fracs.Angles">
		<CLOCKWISE/>
		<ANTICLOCKWISE/>
		<SMALL/>
		<LARGE/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="fracs.Angles" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Angles.hx">
		<pi2pi public="1" get="inline" set="null" line="11" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2pi>
		<zeroto2pi public="1" get="inline" set="null" line="19" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
		<zerotoMinus2pi public="1" get="inline" set="null" line="27" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zerotoMinus2pi>
		<differencePrefer public="1" get="inline" set="null" line="36" static="1"><f a="a:b:prefer">
	<x path="Float"/>
	<x path="Float"/>
	<e path="fracs.DifferencePreference"/>
	<x path="Float"/>
</f></differencePrefer>
		<difference public="1" get="inline" set="null" line="48" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></difference>
		<differenceClockWise public="1" get="inline" set="null" line="57" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceClockWise>
		<differenceAntiClockwise public="1" get="inline" set="null" line="61" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceAntiClockwise>
		<differenceSmall public="1" get="inline" set="null" line="65" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceSmall>
		<differenceLarge public="1" get="inline" set="null" line="80" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceLarge>
		<differenceSmallLarge public="1" get="inline" set="null" line="95" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<a>
		<small><x path="Float"/></small>
		<large><x path="Float"/></large>
	</a>
</f></differenceSmallLarge>
	</class>
	<typedef path="fracs.Fractional" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" module="fracs.Fraction"><a>
	<value><x path="Null"><x path="Float"/></x></value>
	<positive><x path="Bool"/></positive>
	<numerator><x path="Int"/></numerator>
	<denominator><x path="Int"/></denominator>
</a></typedef>
	<abstract path="fracs.FractionArray" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" module="fracs.Fraction">
		<from><icast><c path="Array"><x path="fracs.Fraction"/></c></icast></from>
		<this><c path="Array"><x path="fracs.Fraction"/></c></this>
		<to>
			<icast><c path="Array"><x path="fracs.Fraction"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="?val">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<x path="fracs.FractionArray"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<add public="1" get="inline" set="null" line="17" static="1"><f a="this:val">
	<c path="Array"><x path="fracs.Fraction"/></c>
	<x path="fracs.Fraction"/>
	<x path="Void"/>
</f></add>
	<toString public="1" get="inline" set="null" line="23" static="1">
		<f a="this">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="?val">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<add public="1" get="inline" set="null" line="17" static="1"><f a="this:val">
	<c path="Array"><x path="fracs.Fraction"/></c>
	<x path="fracs.Fraction"/>
	<x path="Void"/>
</f></add>
		<toString public="1" get="inline" set="null" line="23" static="1">
			<f a="this">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="fracs.Fraction" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx">
		<from>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
		</from>
		<this><t path="fracs.Fractional"/></this>
		<to>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="numerator:denominator:?positive:?value" v="::true:null">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta>
			<m n=":value"><e>{ value : null, positive : true }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<optimize get="inline" set="null" line="45" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimize>
	<optimizeFraction get="inline" set="null" line="49" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimizeFraction>
	<toFloat public="1" get="inline" set="null" line="54" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<float public="1" get="inline" set="null" line="62" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="Float"/>
</f></float>
	<verbose public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<c path="String"/>
</f></verbose>
	<fromString public="1" get="inline" set="null" line="71" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="82" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<fromFloat public="1" get="inline" set="null" line="98" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<firstFloat public="1" get="inline" set="null" line="119" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
	<byDenominator public="1" get="inline" set="null" line="126" static="1"><f a="this:val">
	<t path="fracs.Fractional"/>
	<x path="Int"/>
	<c path="String"/>
</f></byDenominator>
	<all public="1" get="inline" set="null" line="137" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
	<similarToFraction public="1" get="inline" set="null" line="141" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToFraction>
	<similarToValue public="1" get="inline" set="null" line="146" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToValue>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="numerator:denominator:?positive:?value" v="::true:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta>
				<m n=":value"><e>{ value : null, positive : true }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<optimize get="inline" set="null" line="45" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimize>
		<optimizeFraction get="inline" set="null" line="49" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimizeFraction>
		<toFloat public="1" get="inline" set="null" line="54" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<float public="1" get="inline" set="null" line="62" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="Float"/>
</f></float>
		<verbose public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<c path="String"/>
</f></verbose>
		<fromString public="1" get="inline" set="null" line="71" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="82" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<fromFloat public="1" get="inline" set="null" line="98" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<firstFloat public="1" get="inline" set="null" line="119" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
		<byDenominator public="1" get="inline" set="null" line="126" static="1"><f a="this:val">
	<t path="fracs.Fractional"/>
	<x path="Int"/>
	<c path="String"/>
</f></byDenominator>
		<all public="1" get="inline" set="null" line="137" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
		<similarToFraction public="1" get="inline" set="null" line="141" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToFraction>
		<similarToValue public="1" get="inline" set="null" line="146" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToValue>
	</class>
	<class path="fracs.Fracs" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" module="fracs.Fraction">
		<grabDecimalInput get="inline" set="null" line="154" static="1"><f a="decimalVal">
	<c path="String"/>
	<x path="Float"/>
</f></grabDecimalInput>
		<approximateFractions set="method" line="160" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":allow"><e>fracs.Fraction</e></m></meta>
		</approximateFractions>
		<getMaxNumerator get="inline" set="null" line="186" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></getMaxNumerator>
		<extractDigitStr get="inline" set="null" line="219" static="1"><f a="fStr">
	<c path="String"/>
	<c path="String"/>
</f></extractDigitStr>
		<getMaxNumeratorStr get="inline" set="null" line="240" static="1"><f a="fStr">
	<c path="String"/>
	<x path="Float"/>
</f></getMaxNumeratorStr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="fracs.Pi2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Pi2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="11" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
	<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
	<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
	<fromFraction get="inline" set="null" line="63" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<fromString get="inline" set="null" line="72" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="78" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="11" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
		<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
		<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<fromFraction get="inline" set="null" line="63" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<fromString get="inline" set="null" line="72" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="78" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="fracs.ZeroTo2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/ZeroTo2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="11" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
	<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
	<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
	<fromFraction get="inline" set="null" line="63" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<fromString get="inline" set="null" line="72" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="78" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="11" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
		<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
		<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<fromFraction get="inline" set="null" line="63" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<fromString get="inline" set="null" line="72" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="78" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Exception" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Exception.hx">
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="26" static="1"><f a="value">
	<x path="Any"/>
	<x path="Any"/>
</f></thrown>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__exceptionMessage>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionMessage>
		<__nativeStack>
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__nativeStack>
		<__skipStack expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="48"><f a=""><x path="Any"/></f></unwrap>
		<get_native final="1" set="method" line="74"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="36">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe._Int64.___Int64" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" extern="1">
		<make public="1" set="method" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_make"</e></m></meta>
		</make>
		<ofInt public="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct"</e></m></meta>
		</ofInt>
		<isInt64 public="1" set="method" static="1">
			<f a="d">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct::is"</e></m></meta>
		</isInt64>
		<isNeg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_neg"</e></m></meta>
		</isNeg>
		<isZero public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_zero"</e></m></meta>
		</isZero>
		<compare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_compare"</e></m></meta>
		</compare>
		<ucompare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ucompare"</e></m></meta>
		</ucompare>
		<toString public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_to_string"</e></m></meta>
		</toString>
		<neg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neg"</e></m></meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_increment"</e></m></meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_increment"</e></m></meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_decrement"</e></m></meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_decrement"</e></m></meta>
		</postDecrement>
		<add public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</add>
		<addInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</addInt>
		<sub public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</sub>
		<subInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</subInt>
		<intSub public="1" set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</intSub>
		<mul public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mul"</e></m></meta>
		</mul>
		<div public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_div"</e></m></meta>
		</div>
		<mod public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mod"</e></m></meta>
		</mod>
		<eq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eq>
		<eqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eqInt>
		<neq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neq>
		<neqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neqInt>
		<complement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_complement"</e></m></meta>
		</complement>
		<bitAnd public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_and"</e></m></meta>
		</bitAnd>
		<bitOr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_or"</e></m></meta>
		</bitOr>
		<bitXor public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_xor"</e></m></meta>
		</bitXor>
		<shl public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shl"</e></m></meta>
		</shl>
		<shr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shr"</e></m></meta>
		</shr>
		<ushr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ushr"</e></m></meta>
		</ushr>
		<high public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_high"</e></m></meta>
		</high>
		<low public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_low"</e></m></meta>
		</low>
		<meta>
			<m n=":notNull"/>
			<m n=":include"><e>"cpp/Int64.h"</e></m>
			<m n=":native"><e>"cpp::Int64Struct"</e></m>
		</meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64"><c path="haxe._Int64.___Int64"/></typedef>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta>
			<m n=":coreApi"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.Log" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1">
			<f a="v:?infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/NativeStackTrace.hx">
		<saveStack public="1" get="inline" set="null" line="12" static="1">
			<f a="exception">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" set="method" line="16" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noDebug"/>
			</meta>
		</callStack>
		<exceptionStack public="1" set="method" line="21" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noDebug"/>
			</meta>
		</exceptionStack>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/local/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.ValueException" params="" file="/usr/local/lib/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.ds.Map" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/usr/local/lib/haxe/std/cpp/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.StringMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="60">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="64">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="68">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<keys public="1" set="method" line="76">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\n  inline void set(String key, ::null value) { __string_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(String key, bool value) { __string_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(String key, char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, signed char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, float value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(String key, double value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(String key, ::String value) { __string_hash_set_string(HX_MAP_THIS,key,value); }\n\n  template<typename V, typename H>\n  inline void set(String key, const ::cpp::Struct<V,H> &value) {__string_hash_set(HX_MAP_THIS,key,value); }\n  template<typename V>\n  inline void set(String key, const ::cpp::Function<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n  template<typename V>\n  inline void set(String key, const ::cpp::Pointer<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n\n  template<typename VALUE>\n  inline void set(Dynamic &key, const VALUE &value) { set( (String)key, value ); }\n\n  inline bool get_bool(String key) { return __string_hash_get_bool(h,key); }\n  inline int get_int(String key) { return __string_hash_get_int(h,key); }\n  inline Float get_float(String key) { return __string_hash_get_float(h,key); }\n  inline String get_string(String key) { return __string_hash_get_string(h,key); }\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.AsVar" params="T" file="/usr/local/lib/haxe/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/usr/local/lib/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="/usr/local/lib/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<sub public="1" set="method" line="38"><f a="begin:?length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></sub>
		<subarray public="1" set="method" line="46"><f a="?begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></subarray>
		<new public="1" set="method" line="32"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/usr/local/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="549" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance with the given `length`. The values of the
		bytes are not initialized and may not be zero.</haxe_doc>
		</alloc>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<setFloat public="1" set="method" line="319">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Stores the given IEEE single-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setFloat>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="Array"><x path="cpp.UInt8"/></c></typedef>
	<enum path="haxe.io.Error" params="" file="/usr/local/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/usr/local/lib/haxe/std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/usr/local/lib/haxe/std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.xml._Access.NodeAccess" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.xml._Access.AttribAccess" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<resolve public="1" set="method" line="39" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":op"><e>a.b</e></m></meta>
	</resolve>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<resolve public="1" set="method" line="39" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":op"><e>a.b</e></m></meta>
		</resolve>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.xml._Access.HasAttribAccess" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<resolve public="1" set="method" line="59" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>a.b</e></m></meta>
	</resolve>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<resolve public="1" set="method" line="59" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>a.b</e></m></meta>
		</resolve>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.xml._Access.HasNodeAccess" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.xml._Access.NodeListAccess" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.xml.Access" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx">
		<this><c path="Xml"/></this>
		<haxe_doc>The `haxe.xml.Access` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
		<impl><class path="haxe.xml._Access.Access_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.xml._Parser.S" params="" file="/usr/local/lib/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.xml._Parser.S_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.xml.XmlParserException" params="" file="/usr/local/lib/haxe/std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="94"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="75"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.xml.Parser" params="" file="/usr/local/lib/haxe/std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="100" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="115" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.

		@throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="121" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.xml.Printer" params="" file="/usr/local/lib/haxe/std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.

		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to
	String representation.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
</haxe>